diff --git a/dist/DateFormatter.main.js b/dist/DateFormatter.main.js
index 0606b515237b87141e3dc98be539820ec048aec9..0823ee86d98574762d8931e4cca876ee4c402427 100644
--- a/dist/DateFormatter.main.js
+++ b/dist/DateFormatter.main.js
@@ -1,3 +1,5 @@
+var $04527da2aa5c2c8d$exports = require("./NepaliDateTimeFormat.main.js");
+
 
 function $parcel$export(e, n, v, s) {
   Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
@@ -14,7 +16,8 @@ $parcel$export(module.exports, "DateFormatter", () => $8f23a04ae90a588b$export$a
  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  * OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- */ let $8f23a04ae90a588b$var$formatterCache = new Map();
+ */ 
+let $8f23a04ae90a588b$var$formatterCache = new Map();
 class $8f23a04ae90a588b$export$ad991b66133851cf {
     /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {
         return this.formatter.format(value);
@@ -68,6 +71,7 @@ class $8f23a04ae90a588b$export$ad991b66133851cf {
     constructor(locale, options = {}){
         this.formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options);
         this.options = options;
+        this.resolvedCalendar = options.calendar;
     }
 }
 // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
@@ -102,6 +106,11 @@ function $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options = {}) {
     }
     let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
     if ($8f23a04ae90a588b$var$formatterCache.has(cacheKey)) return $8f23a04ae90a588b$var$formatterCache.get(cacheKey);
+    if (options.calendar === 'nepali') {
+        let nepaliFormatter = new (0, $04527da2aa5c2c8d$exports.NepaliDateTimeFormat)(locale, options);
+        $8f23a04ae90a588b$var$formatterCache.set(cacheKey, nepaliFormatter);
+        return nepaliFormatter;
+    }
     let numberFormatter = new Intl.DateTimeFormat(locale, options);
     $8f23a04ae90a588b$var$formatterCache.set(cacheKey, numberFormatter);
     return numberFormatter;
diff --git a/dist/DateFormatter.main.js.map b/dist/DateFormatter.main.js.map
index 116dc8f400a50b4965989208f274c7acac8aa675..c6ad4148a1e02912495a41e0ac6218bbccd0cfc4 100644
--- a/dist/DateFormatter.main.js.map
+++ b/dist/DateFormatter.main.js.map
@@ -1 +1 @@
-{"mappings":";;;;;;AAAA;;;;;;;;;;CAUC,GAED,IAAI,uCAAiB,IAAI;AAOlB,MAAM;IAUX,qGAAqG,GACrG,OAAO,KAAW,EAAU;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B;IAEA,4FAA4F,GAC5F,cAAc,KAAW,EAA6B;QACpD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;IACtC;IAEA,sCAAsC,GACtC,YAAY,KAAW,EAAE,GAAS,EAAU;QAC1C,aAAa;QACb,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,KAAK,YACxC,aAAa;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO;QAG3C,IAAI,MAAM,OACR,MAAM,IAAI,WAAW;QAGvB,wCAAwC;QACxC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,UAAG,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM;IAC1E;IAEA,+CAA+C,GAC/C,mBAAmB,KAAW,EAAE,GAAS,EAAyB;QAChE,aAAa;QACb,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,KAAK,YAC/C,aAAa;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO;QAGlD,IAAI,MAAM,OACR,MAAM,IAAI,WAAW;QAGvB,IAAI,aAAa,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAC9C,IAAI,WAAW,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAC5C,OAAO;eACF,WAAW,GAAG,CAAC,CAAA,IAAM,CAAA;oBAAC,GAAG,CAAC;oBAAE,QAAQ;gBAAY,CAAA;YACnD;gBAAC,MAAM;gBAAW,OAAO;gBAAO,QAAQ;YAAQ;eAC7C,SAAS,GAAG,CAAC,CAAA,IAAM,CAAA;oBAAC,GAAG,CAAC;oBAAE,QAAQ;gBAAU,CAAA;SAChD;IACH;IAEA,2FAA2F,GAC3F,kBAAsD;QACpD,IAAI,kBAAkB,IAAI,CAAC,SAAS,CAAC,eAAe;QACpD,IAAI,mDAA6B;YAC/B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EACzB,IAAI,CAAC,iBAAiB,GAAG,2CAAqB,gBAAgB,MAAM,EAAE,IAAI,CAAC,OAAO;YAEpF,gBAAgB,SAAS,GAAG,IAAI,CAAC,iBAAiB;YAClD,gBAAgB,MAAM,GAAG,IAAI,CAAC,iBAAiB,KAAK,SAAS,IAAI,CAAC,iBAAiB,KAAK;QAC1F;QAEA,uEAAuE;QACvE,iDAAiD;QACjD,IAAI,gBAAgB,QAAQ,KAAK,uBAC/B,gBAAgB,QAAQ,GAAG;QAG7B,OAAO;IACT;IAtEA,YAAY,MAAc,EAAE,UAAsC,CAAC,CAAC,CAAE;QACpE,IAAI,CAAC,SAAS,GAAG,6CAAuB,QAAQ;QAChD,IAAI,CAAC,OAAO,GAAG;IACjB;AAoEF;AAEA,iGAAiG;AACjG,uHAAuH;AACvH,iIAAiI;AACjI,uCAAuC;AACvC,yHAAyH;AACzH,yHAAyH;AACzH,oEAAoE;AACpE,iDAAiD;AACjD,qDAAqD;AAErD,yIAAyI;AACzI,MAAM,0CAAoB;IACxB,MAAM;QACJ,yEAAyE;QACzE,IAAI;IACN;IACA,OAAO;IAEP;AACF;AAEA,SAAS,6CAAuB,MAAc,EAAE,UAAsC,CAAC,CAAC;IACtF,0FAA0F;IAC1F,uGAAuG;IACvG,IAAI,OAAO,QAAQ,MAAM,KAAK,aAAa,gDAA0B;QACnE,UAAU;YAAC,GAAG,OAAO;QAAA;QACrB,IAAI,OAAO,uCAAiB,CAAC,OAAO,QAAQ,MAAM,EAAE,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1E,IAAI,mBAAmB,QAAQ,MAAM,GAAG,QAAQ;QAChD,QAAQ,SAAS,GAAG,iBAAA,kBAAA,OAAQ;QAC5B,OAAO,QAAQ,MAAM;IACvB;IAEA,IAAI,WAAW,SAAU,CAAA,UAAU,OAAO,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,IAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,EAAC;IAC1G,IAAI,qCAAe,GAAG,CAAC,WACrB,OAAO,qCAAe,GAAG,CAAC;IAG5B,IAAI,kBAAkB,IAAI,KAAK,cAAc,CAAC,QAAQ;IACtD,qCAAe,GAAG,CAAC,UAAU;IAC7B,OAAO;AACT;AAEA,IAAI,gDAA0C;AAC9C,SAAS;IACP,IAAI,iDAA2B,MAC7B,gDAA0B,IAAI,KAAK,cAAc,CAAC,SAAS;QACzD,MAAM;QACN,QAAQ;IACV,GAAG,MAAM,CAAC,IAAI,KAAK,MAAM,GAAG,GAAG,QAAQ;IAGzC,OAAO;AACT;AAEA,IAAI,mDAA6C;AACjD,SAAS;IACP,IAAI,oDAA8B,MAChC,mDAA6B,IAAI,KAAK,cAAc,CAAC,MAAM;QACzD,MAAM;QACN,QAAQ;IACV,GAAG,eAAe,GAAG,SAAS,KAAK;IAGrC,OAAO;AACT;AAEA,SAAS,2CAAqB,MAAc,EAAE,OAAmC;IAC/E,IAAI,CAAC,QAAQ,SAAS,IAAI,CAAC,QAAQ,IAAI,EACrC,OAAO;IAGT,gFAAgF;IAChF,6FAA6F;IAC7F,SAAS,OAAO,OAAO,CAAC,0BAA0B;IAClD,UAAU,AAAC,CAAA,OAAO,QAAQ,CAAC,SAAS,KAAK,IAAG,IAAK;IACjD,IAAI,YAAY,6CAAuB,QAAQ;QAC7C,GAAG,OAAO;QACV,UAAU,UAAU,qBAAqB;IAC3C;IAEA,IAAI,MAAM,SAAS,UAAU,aAAa,CAAC,IAAI,KAAK,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,QAAS,KAAK,EAAE;IACzG,IAAI,MAAM,SAAS,UAAU,aAAa,CAAC,IAAI,KAAK,MAAM,GAAG,GAAG,KAAK,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,QAAS,KAAK,EAAE;IAE1G,IAAI,QAAQ,KAAK,QAAQ,IACvB,OAAO;IAGT,IAAI,QAAQ,MAAM,QAAQ,IACxB,OAAO;IAGT,IAAI,QAAQ,KAAK,QAAQ,IACvB,OAAO;IAGT,IAAI,QAAQ,MAAM,QAAQ,IACxB,OAAO;IAGT,MAAM,IAAI,MAAM;AAClB","sources":["packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions();\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey)!;\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean | null = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean | null = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions().hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour')!.value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour')!.value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"],"names":[],"version":3,"file":"DateFormatter.main.js.map"}
\ No newline at end of file
+{"mappings":"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","sources":["packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {NepaliDateTimeFormat} from './NepaliDateTimeFormat';\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n  private resolvedCalendar: Intl.DateTimeFormatOptions['calendar'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n    this.resolvedCalendar = options.calendar;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions();\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey)!;\n  }\n\n  if (options.calendar === 'nepali') {\n    let nepaliFormatter = new NepaliDateTimeFormat(locale, options);\n    formatterCache.set(cacheKey, nepaliFormatter);\n    return nepaliFormatter;\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean | null = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean | null = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions().hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour')!.value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour')!.value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"],"names":[],"version":3,"file":"DateFormatter.main.js.map"}
\ No newline at end of file
diff --git a/dist/DateFormatter.mjs b/dist/DateFormatter.mjs
index a86b0a3c0071e27636f7da325c5fbb52134e7458..fd9b49c2a2fefbbe2bd1b2717dc03b2ece6f99a4 100644
--- a/dist/DateFormatter.mjs
+++ b/dist/DateFormatter.mjs
@@ -1,3 +1,5 @@
+import {NepaliDateTimeFormat as $ce362947f989ca88$export$26111daf82bf03cd} from "./NepaliDateTimeFormat.mjs";
+
 /*
  * Copyright 2020 Adobe. All rights reserved.
  * This file is licensed to you under the Apache License, Version 2.0 (the "License");
@@ -8,7 +10,8 @@
  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  * OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- */ let $fb18d541ea1ad717$var$formatterCache = new Map();
+ */ 
+let $fb18d541ea1ad717$var$formatterCache = new Map();
 class $fb18d541ea1ad717$export$ad991b66133851cf {
     /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {
         return this.formatter.format(value);
@@ -62,6 +65,7 @@ class $fb18d541ea1ad717$export$ad991b66133851cf {
     constructor(locale, options = {}){
         this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
         this.options = options;
+        this.resolvedCalendar = options.calendar;
     }
 }
 // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
@@ -96,6 +100,11 @@ function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
     }
     let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
     if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
+    if (options.calendar === 'nepali') {
+        let nepaliFormatter = new (0, $ce362947f989ca88$export$26111daf82bf03cd)(locale, options);
+        $fb18d541ea1ad717$var$formatterCache.set(cacheKey, nepaliFormatter);
+        return nepaliFormatter;
+    }
     let numberFormatter = new Intl.DateTimeFormat(locale, options);
     $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
     return numberFormatter;
diff --git a/dist/DateFormatter.module.js b/dist/DateFormatter.module.js
index a86b0a3c0071e27636f7da325c5fbb52134e7458..5db2e0cb8779550149c70241b1ab6f9f574520cd 100644
--- a/dist/DateFormatter.module.js
+++ b/dist/DateFormatter.module.js
@@ -1,3 +1,5 @@
+import {NepaliDateTimeFormat as $ce362947f989ca88$export$26111daf82bf03cd} from "./NepaliDateTimeFormat.module.js";
+
 /*
  * Copyright 2020 Adobe. All rights reserved.
  * This file is licensed to you under the Apache License, Version 2.0 (the "License");
@@ -8,7 +10,8 @@
  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  * OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- */ let $fb18d541ea1ad717$var$formatterCache = new Map();
+ */ 
+let $fb18d541ea1ad717$var$formatterCache = new Map();
 class $fb18d541ea1ad717$export$ad991b66133851cf {
     /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {
         return this.formatter.format(value);
@@ -62,6 +65,7 @@ class $fb18d541ea1ad717$export$ad991b66133851cf {
     constructor(locale, options = {}){
         this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
         this.options = options;
+        this.resolvedCalendar = options.calendar;
     }
 }
 // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
@@ -96,6 +100,11 @@ function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
     }
     let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
     if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
+    if (options.calendar === 'nepali') {
+        let nepaliFormatter = new (0, $ce362947f989ca88$export$26111daf82bf03cd)(locale, options);
+        $fb18d541ea1ad717$var$formatterCache.set(cacheKey, nepaliFormatter);
+        return nepaliFormatter;
+    }
     let numberFormatter = new Intl.DateTimeFormat(locale, options);
     $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
     return numberFormatter;
diff --git a/dist/DateFormatter.module.js.map b/dist/DateFormatter.module.js.map
index b54566f740c20a0dce7ed016c1179b2683801f47..5be55d48d02365390503844c77b7e2d538a41dcf 100644
--- a/dist/DateFormatter.module.js.map
+++ b/dist/DateFormatter.module.js.map
@@ -1 +1 @@
-{"mappings":"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","sources":["packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions();\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey)!;\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean | null = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean | null = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions().hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour')!.value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour')!.value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"],"names":[],"version":3,"file":"DateFormatter.module.js.map"}
\ No newline at end of file
+{"mappings":";;AAAA;;;;;;;;;;CAUC;AAID,IAAI,uCAAiB,IAAI;AAOlB,MAAM;IAYX,qGAAqG,GACrG,OAAO,KAAW,EAAU;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B;IAEA,4FAA4F,GAC5F,cAAc,KAAW,EAA6B;QACpD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;IACtC;IAEA,sCAAsC,GACtC,YAAY,KAAW,EAAE,GAAS,EAAU;QAC1C,aAAa;QACb,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,KAAK,YACxC,aAAa;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO;QAG3C,IAAI,MAAM,OACR,MAAM,IAAI,WAAW;QAGvB,wCAAwC;QACxC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,UAAG,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM;IAC1E;IAEA,+CAA+C,GAC/C,mBAAmB,KAAW,EAAE,GAAS,EAAyB;QAChE,aAAa;QACb,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,KAAK,YAC/C,aAAa;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO;QAGlD,IAAI,MAAM,OACR,MAAM,IAAI,WAAW;QAGvB,IAAI,aAAa,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAC9C,IAAI,WAAW,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAC5C,OAAO;eACF,WAAW,GAAG,CAAC,CAAA,IAAM,CAAA;oBAAC,GAAG,CAAC;oBAAE,QAAQ;gBAAY,CAAA;YACnD;gBAAC,MAAM;gBAAW,OAAO;gBAAO,QAAQ;YAAQ;eAC7C,SAAS,GAAG,CAAC,CAAA,IAAM,CAAA;oBAAC,GAAG,CAAC;oBAAE,QAAQ;gBAAU,CAAA;SAChD;IACH;IAEA,2FAA2F,GAC3F,kBAAsD;QACpD,IAAI,kBAAkB,IAAI,CAAC,SAAS,CAAC,eAAe;QACpD,IAAI,mDAA6B;YAC/B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EACzB,IAAI,CAAC,iBAAiB,GAAG,2CAAqB,gBAAgB,MAAM,EAAE,IAAI,CAAC,OAAO;YAEpF,gBAAgB,SAAS,GAAG,IAAI,CAAC,iBAAiB;YAClD,gBAAgB,MAAM,GAAG,IAAI,CAAC,iBAAiB,KAAK,SAAS,IAAI,CAAC,iBAAiB,KAAK;QAC1F;QAEA,uEAAuE;QACvE,iDAAiD;QACjD,IAAI,gBAAgB,QAAQ,KAAK,uBAC/B,gBAAgB,QAAQ,GAAG;QAG7B,OAAO;IACT;IAvEA,YAAY,MAAc,EAAE,UAAsC,CAAC,CAAC,CAAE;QACpE,IAAI,CAAC,SAAS,GAAG,6CAAuB,QAAQ;QAChD,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,gBAAgB,GAAG,QAAQ,QAAQ;IAC1C;AAoEF;AAEA,iGAAiG;AACjG,uHAAuH;AACvH,iIAAiI;AACjI,uCAAuC;AACvC,yHAAyH;AACzH,yHAAyH;AACzH,oEAAoE;AACpE,iDAAiD;AACjD,qDAAqD;AAErD,yIAAyI;AACzI,MAAM,0CAAoB;IACxB,MAAM;QACJ,yEAAyE;QACzE,IAAI;IACN;IACA,OAAO;IAEP;AACF;AAEA,SAAS,6CAAuB,MAAc,EAAE,UAAsC,CAAC,CAAC;IACtF,0FAA0F;IAC1F,uGAAuG;IACvG,IAAI,OAAO,QAAQ,MAAM,KAAK,aAAa,gDAA0B;QACnE,UAAU;YAAC,GAAG,OAAO;QAAA;QACrB,IAAI,OAAO,uCAAiB,CAAC,OAAO,QAAQ,MAAM,EAAE,CAAC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1E,IAAI,mBAAmB,QAAQ,MAAM,GAAG,QAAQ;QAChD,QAAQ,SAAS,GAAG,iBAAA,kBAAA,OAAQ;QAC5B,OAAO,QAAQ,MAAM;IACvB;IAEA,IAAI,WAAW,SAAU,CAAA,UAAU,OAAO,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,IAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,EAAC;IAC1G,IAAI,qCAAe,GAAG,CAAC,WACrB,OAAO,qCAAe,GAAG,CAAC;IAG5B,IAAI,QAAQ,QAAQ,KAAK,UAAU;QACjC,IAAI,kBAAkB,IAAI,CAAA,GAAA,yCAAmB,EAAE,QAAQ;QACvD,qCAAe,GAAG,CAAC,UAAU;QAC7B,OAAO;IACT;IAEA,IAAI,kBAAkB,IAAI,KAAK,cAAc,CAAC,QAAQ;IACtD,qCAAe,GAAG,CAAC,UAAU;IAC7B,OAAO;AACT;AAEA,IAAI,gDAA0C;AAC9C,SAAS;IACP,IAAI,iDAA2B,MAC7B,gDAA0B,IAAI,KAAK,cAAc,CAAC,SAAS;QACzD,MAAM;QACN,QAAQ;IACV,GAAG,MAAM,CAAC,IAAI,KAAK,MAAM,GAAG,GAAG,QAAQ;IAGzC,OAAO;AACT;AAEA,IAAI,mDAA6C;AACjD,SAAS;IACP,IAAI,oDAA8B,MAChC,mDAA6B,IAAI,KAAK,cAAc,CAAC,MAAM;QACzD,MAAM;QACN,QAAQ;IACV,GAAG,eAAe,GAAG,SAAS,KAAK;IAGrC,OAAO;AACT;AAEA,SAAS,2CAAqB,MAAc,EAAE,OAAmC;IAC/E,IAAI,CAAC,QAAQ,SAAS,IAAI,CAAC,QAAQ,IAAI,EACrC,OAAO;IAGT,gFAAgF;IAChF,6FAA6F;IAC7F,SAAS,OAAO,OAAO,CAAC,0BAA0B;IAClD,UAAU,AAAC,CAAA,OAAO,QAAQ,CAAC,SAAS,KAAK,IAAG,IAAK;IACjD,IAAI,YAAY,6CAAuB,QAAQ;QAC7C,GAAG,OAAO;QACV,UAAU,UAAU,qBAAqB;IAC3C;IAEA,IAAI,MAAM,SAAS,UAAU,aAAa,CAAC,IAAI,KAAK,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,QAAS,KAAK,EAAE;IACzG,IAAI,MAAM,SAAS,UAAU,aAAa,CAAC,IAAI,KAAK,MAAM,GAAG,GAAG,KAAK,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,QAAS,KAAK,EAAE;IAE1G,IAAI,QAAQ,KAAK,QAAQ,IACvB,OAAO;IAGT,IAAI,QAAQ,MAAM,QAAQ,IACxB,OAAO;IAGT,IAAI,QAAQ,KAAK,QAAQ,IACvB,OAAO;IAGT,IAAI,QAAQ,MAAM,QAAQ,IACxB,OAAO;IAGT,MAAM,IAAI,MAAM;AAClB","sources":["packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {NepaliDateTimeFormat} from './NepaliDateTimeFormat';\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n  private resolvedCalendar: Intl.DateTimeFormatOptions['calendar'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n    this.resolvedCalendar = options.calendar;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions();\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey)!;\n  }\n\n  if (options.calendar === 'nepali') {\n    let nepaliFormatter = new NepaliDateTimeFormat(locale, options);\n    formatterCache.set(cacheKey, nepaliFormatter);\n    return nepaliFormatter;\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean | null = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean | null = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions().hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour')!.value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour')!.value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"],"names":[],"version":3,"file":"DateFormatter.module.js.map"}
\ No newline at end of file
diff --git a/dist/NepaliCalendar.main.js b/dist/NepaliCalendar.main.js
new file mode 100644
index 0000000000000000000000000000000000000000..0a55f61d6a9f504f5b59c66c4f4dedaf75b0d31f
--- /dev/null
+++ b/dist/NepaliCalendar.main.js
@@ -0,0 +1,206 @@
+var $625ad1e1f4c43bc1$exports = require("./CalendarDate.main.js");
+var $af14c9812fdceb33$exports = require("./GregorianCalendar.main.js");
+
+
+function $parcel$export(e, n, v, s) {
+  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
+}
+
+$parcel$export(module.exports, "NepaliCalendar", () => $fe18f90f992fac43$export$d3a3277d294231d);
+/*
+ * Copyright 2020 Adobe. All rights reserved.
+ * This file is licensed to you under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License. You may obtain a copy
+ * of the License at http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under
+ * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
+ * OF ANY KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+ */ // Portions of the code in this file are based on code from ICU.
+// Original licensing can be found in the NOTICE file in the root directory of this source tree.
+
+
+const $fe18f90f992fac43$var$MS_PER_DAY = 86400000;
+const $fe18f90f992fac43$var$VIKRAM_SAMVAT_EPOCH = -1789990200000;
+const $fe18f90f992fac43$var$VIKRAM_YEAR_ZERO = 1970;
+const $fe18f90f992fac43$var$ENCODED_MONTH_LENGTHS = [
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5119fa,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5116ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aba,
+    0x511aba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x844aed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x5456ee,
+    0x5456ed,
+    0x5456ba,
+    0x5456ba,
+    0x5459ee,
+    0x5456ed,
+    0x545aba,
+    0x5459f9,
+    0x5456ed,
+    0x5456ed // 2090
+];
+function $fe18f90f992fac43$var$_getDaysInMonth(year, month) {
+    if (month < 1 || month > 12) throw new Error('Invalid month value: ' + month);
+    const delta = $fe18f90f992fac43$var$ENCODED_MONTH_LENGTHS[year - $fe18f90f992fac43$var$VIKRAM_YEAR_ZERO];
+    if (typeof delta === 'undefined') throw new Error('No data for year: ' + year + ' BS');
+    return 29 + (delta >>> (month - 1 << 1) & 3);
+}
+class $fe18f90f992fac43$export$d3a3277d294231d extends (0, $af14c9812fdceb33$exports.GregorianCalendar) {
+    fromJulianDay(jd) {
+        // Gregorian date for Julian day
+        let date = super.fromJulianDay(jd);
+        var m, dM, year = $fe18f90f992fac43$var$VIKRAM_YEAR_ZERO, days = Math.floor((Date.parse(date.toString()) - $fe18f90f992fac43$var$VIKRAM_SAMVAT_EPOCH) / $fe18f90f992fac43$var$MS_PER_DAY) + 1;
+        while(days > 0){
+            for(m = 1; m <= 12; ++m){
+                dM = $fe18f90f992fac43$var$_getDaysInMonth(year, m);
+                if (days <= dM) return new (0, $625ad1e1f4c43bc1$exports.CalendarDate)(this, year, m, days);
+                days -= dM;
+            }
+            ++year;
+        }
+        throw new Error('Date outside supported range: ' + jd + ' AD');
+    }
+    toJulianDay(date) {
+        if (date.year < $fe18f90f992fac43$var$VIKRAM_YEAR_ZERO) throw new Error('Invalid year value: ' + date.year);
+        if (date.day < 1 || date.day > $fe18f90f992fac43$var$_getDaysInMonth(date.year, date.month)) throw new Error('Invalid day value: ' + date.day);
+        let timestamp = $fe18f90f992fac43$var$VIKRAM_SAMVAT_EPOCH + $fe18f90f992fac43$var$MS_PER_DAY * date.day;
+        let { year: year, month: month } = date;
+        month -= 1;
+        while(year >= $fe18f90f992fac43$var$VIKRAM_YEAR_ZERO){
+            while(month > 0){
+                timestamp += $fe18f90f992fac43$var$MS_PER_DAY * $fe18f90f992fac43$var$_getDaysInMonth(year, month);
+                month--;
+            }
+            month = 12;
+            year--;
+        }
+        const jsdate = new Date(timestamp);
+        return (0, $af14c9812fdceb33$exports.gregorianToJulianDay)('AD', jsdate.getUTCFullYear(), jsdate.getUTCMonth() + 1, jsdate.getUTCDate());
+    }
+    getDaysInMonth(date) {
+        return $fe18f90f992fac43$var$_getDaysInMonth(date.year, date.month);
+    }
+    getYearsInEra() {
+        return $fe18f90f992fac43$var$VIKRAM_YEAR_ZERO + $fe18f90f992fac43$var$ENCODED_MONTH_LENGTHS.length - 1;
+    }
+    getEras() {
+        return [
+            'BS'
+        ];
+    }
+    balanceDate() {}
+    constructor(...args){
+        super(...args), this.identifier = 'nepali';
+    }
+}
+
+
+//# sourceMappingURL=NepaliCalendar.main.js.map
diff --git a/dist/NepaliCalendar.main.js.map b/dist/NepaliCalendar.main.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..72649a462c3c4259364d4dfce0f5ae31a30feda3
--- /dev/null
+++ b/dist/NepaliCalendar.main.js.map
@@ -0,0 +1 @@
+{"mappings":";;;;;;;;;AAAA;;;;;;;;;;CAUC,GAED,gEAAgE;AAChE,gGAAgG;;;AAMhG,MAAM,mCAAa;AACnB,MAAM,4CAAsB;AAE5B,MAAM,yCAAmB;AAEzB,MAAM,8CAAwmG,OAAO;CAC3G;AAED,SAAS,sCAAgB,IAAY,EAAE,KAAa;IAClD,IAAI,QAAQ,KAAK,QAAQ,IAAK,MAAM,IAAI,MAAM,0BAA0B;IAExE,MAAM,QAAQ,2CAAqB,CAAC,OAAO,uCAAiB;IAC5D,IAAI,OAAO,UAAU,aAAc,MAAM,IAAI,MAAM,uBAAuB,OAAO;IAEjF,OAAO,KAAM,CAAA,AAAC,UAAY,CAAA,AAAC,QAAQ,KAAM,CAAA,IAAO,CAAA;AAClD;AAOO,MAAM,iDAAuB,CAAA,GAAA,2CAAgB;IAGlD,cAAc,EAAU,EAAgB;QACtC,gCAAgC;QAChC,IAAI,OAAO,KAAK,CAAC,cAAc;QAE/B,IAAI,GAAG,IAAI,OAAO,wCAAkB,OAAO,KAAK,KAAK,CAAC,AAAC,CAAA,KAAK,KAAK,CAAC,KAAK,QAAQ,MAAM,yCAAkB,IAAK,oCAAc;QAE1H,MAAO,OAAO,EAAG;YACf,IAAK,IAAI,GAAG,KAAK,IAAI,EAAE,EAAG;gBACxB,KAAK,sCAAgB,MAAM;gBAC3B,IAAI,QAAQ,IAAK,OAAO,IAAI,CAAA,GAAA,sCAAW,EAAE,IAAI,EAAE,MAAM,GAAG;gBACxD,QAAQ;YACV;YACA,EAAE;QACJ;QAEA,MAAM,IAAI,MAAM,mCAAmC,KAAK;IAC1D;IAEA,YAAY,IAAqB,EAAU;QACzC,IAAI,KAAK,IAAI,GAAG,wCAAmB,MAAM,IAAI,MAAM,yBAAyB,KAAK,IAAI;QACrF,IAAI,KAAK,GAAG,GAAG,KAAK,KAAK,GAAG,GAAG,sCAAgB,KAAK,IAAI,EAAE,KAAK,KAAK,GAAI,MAAM,IAAI,MAAM,wBAAwB,KAAK,GAAG;QAExH,IAAI,YAAY,4CAAuB,mCAAa,KAAK,GAAG;QAG5D,IAAI,QAAC,IAAI,SAAE,KAAK,EAAC,GAAG;QAEpB,SAAS;QAET,MAAO,QAAQ,uCAAkB;YAC/B,MAAO,QAAQ,EAAG;gBAChB,aAAc,mCAAa,sCAAgB,MAAM;gBACjD;YACF;YACA,QAAQ;YACR;QACF;QAEA,MAAM,SAAS,IAAI,KAAK;QAExB,OAAO,CAAA,GAAA,8CAAmB,EAAE,MAAM,OAAO,cAAc,IAAI,OAAO,WAAW,KAAK,GAAG,OAAO,UAAU;IACxG;IAEA,eAAe,IAAqB,EAAU;QAC5C,OAAO,sCAAgB,KAAK,IAAI,EAAE,KAAK,KAAK;IAC9C;IAEA,gBAAwB;QACtB,OAAO,yCAAmB,4CAAsB,MAAM,GAAG;IAC3D;IAEA,UAAoB;QAClB,OAAO;YAAC;SAAK;IACf;IAEA,cAAoB,CAAC;;QA1DhB,qBACL,aAAa;;AA0Df","sources":["packages/@internationalized/date/src/calendars/NepaliCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, CalendarIdentifier} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar, gregorianToJulianDay} from './GregorianCalendar';\n\nconst MS_PER_DAY = 86400000;\nconst VIKRAM_SAMVAT_EPOCH = -1789990200000;\n\nconst VIKRAM_YEAR_ZERO = 1970;\n\nconst ENCODED_MONTH_LENGTHS = [\n  0x511aba, 0x5117ba, 0x9056ee, 0x8456ed, 0x511aba, 0x5119fa, 0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, // 1970-1979\n  0x9056ee, 0x514aea, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, // 1980-1989\n  0x511aba, 0x5116ee, 0x8456ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aba, 0x511aba, 0x9056ee, // 1990-1999\n  0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aea, 0x511aba, // 2000-2009\n  0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x8456ee, // 2010-2019\n  0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aea, 0x511aba, 0x9056ee, 0x8456ed, 0x511aba, 0x5117ba, // 2020-2029\n  0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aed, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, // 2030-2039\n  0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, 0x511aba, 0x5056ee, // 2040-2049\n  0x8456ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aba, 0x5117ba, 0x9056ee, 0x8456ed, 0x511aba, // 2050-2059\n  0x5116fa, 0x9056ee, 0x844aed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aea, 0x511aba, 0x5116fa, 0x9056ee, // 2060-2069\n  0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aea, 0x511aba, // 2070-2079\n  0x5056ee, 0x5456ee, 0x5456ed, 0x5456ba, 0x5456ba, 0x5459ee, 0x5456ed, 0x545aba, 0x5459f9, 0x5456ed, // 2080-2089\n  0x5456ed                                                                                           // 2090\n];\n\nfunction _getDaysInMonth(year: number, month: number) {\n  if (month < 1 || month > 12) {throw new Error('Invalid month value: ' + month);}\n\n  const delta = ENCODED_MONTH_LENGTHS[year - VIKRAM_YEAR_ZERO];\n  if (typeof delta === 'undefined') {throw new Error('No data for year: ' + year + ' BS');}\n\n  return 29 + ((delta >>> (((month - 1) << 1))) & 3);\n}\n\n/**\n * The Vikram Samvat Calendar is a historical Hindu calendar used in the Indian subcontinent and Nepal.\n * Years are counted from 57 BCE. The calendar is primarily used in Nepal and among Hindus\n * in North India. Only one era identifier is supported: 'vikram'.\n */\nexport class NepaliCalendar extends GregorianCalendar {\n  identifier = 'nepali' as CalendarIdentifier;\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    var m, dM, year = VIKRAM_YEAR_ZERO, days = Math.floor((Date.parse(date.toString()) - VIKRAM_SAMVAT_EPOCH) / MS_PER_DAY) + 1;\n\n    while (days > 0) {\n      for (m = 1; m <= 12; ++m) {\n        dM = _getDaysInMonth(year, m);\n        if (days <= dM) {return new CalendarDate(this, year, m, days);}\n        days -= dM;\n      }\n      ++year;\n    }\n\n    throw new Error('Date outside supported range: ' + jd + ' AD');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < VIKRAM_YEAR_ZERO) {throw new Error('Invalid year value: ' + date.year);}\n    if (date.day < 1 || date.day > _getDaysInMonth(date.year, date.month)) {throw new Error('Invalid day value: ' + date.day);}\n\n    let timestamp = VIKRAM_SAMVAT_EPOCH + (MS_PER_DAY * date.day);\n\n\n    let {year, month} = date;\n\n    month -= 1;\n\n    while (year >= VIKRAM_YEAR_ZERO) {\n      while (month > 0) {\n        timestamp += (MS_PER_DAY * _getDaysInMonth(year, month));\n        month--;\n      }\n      month = 12;\n      year--;\n    }\n\n    const jsdate = new Date(timestamp);\n\n    return gregorianToJulianDay('AD', jsdate.getUTCFullYear(), jsdate.getUTCMonth() + 1, jsdate.getUTCDate());\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return _getDaysInMonth(date.year, date.month);\n  }\n\n  getYearsInEra(): number {\n    return VIKRAM_YEAR_ZERO + ENCODED_MONTH_LENGTHS.length - 1;\n  }\n\n  getEras(): string[] {\n    return ['BS'];\n  }\n\n  balanceDate(): void {}\n}\n"],"names":[],"version":3,"file":"NepaliCalendar.main.js.map"}
\ No newline at end of file
diff --git a/dist/NepaliCalendar.mjs b/dist/NepaliCalendar.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..520c751dff839229072084a3bf0f6c677708f5da
--- /dev/null
+++ b/dist/NepaliCalendar.mjs
@@ -0,0 +1,201 @@
+import {CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f} from "./CalendarDate.mjs";
+import {GregorianCalendar as $3b62074eb05584b2$export$80ee6245ec4f29ec, gregorianToJulianDay as $3b62074eb05584b2$export$f297eb839006d339} from "./GregorianCalendar.mjs";
+
+/*
+ * Copyright 2020 Adobe. All rights reserved.
+ * This file is licensed to you under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License. You may obtain a copy
+ * of the License at http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under
+ * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
+ * OF ANY KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+ */ // Portions of the code in this file are based on code from ICU.
+// Original licensing can be found in the NOTICE file in the root directory of this source tree.
+
+
+const $6d143e82714b55de$var$MS_PER_DAY = 86400000;
+const $6d143e82714b55de$var$VIKRAM_SAMVAT_EPOCH = -1789990200000;
+const $6d143e82714b55de$var$VIKRAM_YEAR_ZERO = 1970;
+const $6d143e82714b55de$var$ENCODED_MONTH_LENGTHS = [
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5119fa,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5116ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aba,
+    0x511aba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x844aed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x5456ee,
+    0x5456ed,
+    0x5456ba,
+    0x5456ba,
+    0x5459ee,
+    0x5456ed,
+    0x545aba,
+    0x5459f9,
+    0x5456ed,
+    0x5456ed // 2090
+];
+function $6d143e82714b55de$var$_getDaysInMonth(year, month) {
+    if (month < 1 || month > 12) throw new Error('Invalid month value: ' + month);
+    const delta = $6d143e82714b55de$var$ENCODED_MONTH_LENGTHS[year - $6d143e82714b55de$var$VIKRAM_YEAR_ZERO];
+    if (typeof delta === 'undefined') throw new Error('No data for year: ' + year + ' BS');
+    return 29 + (delta >>> (month - 1 << 1) & 3);
+}
+class $6d143e82714b55de$export$d3a3277d294231d extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {
+    fromJulianDay(jd) {
+        // Gregorian date for Julian day
+        let date = super.fromJulianDay(jd);
+        var m, dM, year = $6d143e82714b55de$var$VIKRAM_YEAR_ZERO, days = Math.floor((Date.parse(date.toString()) - $6d143e82714b55de$var$VIKRAM_SAMVAT_EPOCH) / $6d143e82714b55de$var$MS_PER_DAY) + 1;
+        while(days > 0){
+            for(m = 1; m <= 12; ++m){
+                dM = $6d143e82714b55de$var$_getDaysInMonth(year, m);
+                if (days <= dM) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, m, days);
+                days -= dM;
+            }
+            ++year;
+        }
+        throw new Error('Date outside supported range: ' + jd + ' AD');
+    }
+    toJulianDay(date) {
+        if (date.year < $6d143e82714b55de$var$VIKRAM_YEAR_ZERO) throw new Error('Invalid year value: ' + date.year);
+        if (date.day < 1 || date.day > $6d143e82714b55de$var$_getDaysInMonth(date.year, date.month)) throw new Error('Invalid day value: ' + date.day);
+        let timestamp = $6d143e82714b55de$var$VIKRAM_SAMVAT_EPOCH + $6d143e82714b55de$var$MS_PER_DAY * date.day;
+        let { year: year, month: month } = date;
+        month -= 1;
+        while(year >= $6d143e82714b55de$var$VIKRAM_YEAR_ZERO){
+            while(month > 0){
+                timestamp += $6d143e82714b55de$var$MS_PER_DAY * $6d143e82714b55de$var$_getDaysInMonth(year, month);
+                month--;
+            }
+            month = 12;
+            year--;
+        }
+        const jsdate = new Date(timestamp);
+        return (0, $3b62074eb05584b2$export$f297eb839006d339)('AD', jsdate.getUTCFullYear(), jsdate.getUTCMonth() + 1, jsdate.getUTCDate());
+    }
+    getDaysInMonth(date) {
+        return $6d143e82714b55de$var$_getDaysInMonth(date.year, date.month);
+    }
+    getYearsInEra() {
+        return $6d143e82714b55de$var$VIKRAM_YEAR_ZERO + $6d143e82714b55de$var$ENCODED_MONTH_LENGTHS.length - 1;
+    }
+    getEras() {
+        return [
+            'BS'
+        ];
+    }
+    balanceDate() {}
+    constructor(...args){
+        super(...args), this.identifier = 'nepali';
+    }
+}
+
+
+export {$6d143e82714b55de$export$d3a3277d294231d as NepaliCalendar};
+//# sourceMappingURL=NepaliCalendar.module.js.map
diff --git a/dist/NepaliCalendar.module.js b/dist/NepaliCalendar.module.js
new file mode 100644
index 0000000000000000000000000000000000000000..0b1b5116c547738e9ce82570365b056795fb108e
--- /dev/null
+++ b/dist/NepaliCalendar.module.js
@@ -0,0 +1,201 @@
+import {CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f} from "./CalendarDate.module.js";
+import {GregorianCalendar as $3b62074eb05584b2$export$80ee6245ec4f29ec, gregorianToJulianDay as $3b62074eb05584b2$export$f297eb839006d339} from "./GregorianCalendar.module.js";
+
+/*
+ * Copyright 2020 Adobe. All rights reserved.
+ * This file is licensed to you under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License. You may obtain a copy
+ * of the License at http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under
+ * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
+ * OF ANY KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+ */ // Portions of the code in this file are based on code from ICU.
+// Original licensing can be found in the NOTICE file in the root directory of this source tree.
+
+
+const $6d143e82714b55de$var$MS_PER_DAY = 86400000;
+const $6d143e82714b55de$var$VIKRAM_SAMVAT_EPOCH = -1789990200000;
+const $6d143e82714b55de$var$VIKRAM_YEAR_ZERO = 1970;
+const $6d143e82714b55de$var$ENCODED_MONTH_LENGTHS = [
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5119fa,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5116ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aba,
+    0x511aba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aba,
+    0x5117ba,
+    0x9056ee,
+    0x8456ed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x844aed,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x814aea,
+    0x511aba,
+    0x5116fa,
+    0x9056ee,
+    0x514aea,
+    0x511aba,
+    0x5116ee,
+    0x9056ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x8456ee,
+    0x511aea,
+    0x511aba,
+    0x5056ee,
+    0x5456ee,
+    0x5456ed,
+    0x5456ba,
+    0x5456ba,
+    0x5459ee,
+    0x5456ed,
+    0x545aba,
+    0x5459f9,
+    0x5456ed,
+    0x5456ed // 2090
+];
+function $6d143e82714b55de$var$_getDaysInMonth(year, month) {
+    if (month < 1 || month > 12) throw new Error('Invalid month value: ' + month);
+    const delta = $6d143e82714b55de$var$ENCODED_MONTH_LENGTHS[year - $6d143e82714b55de$var$VIKRAM_YEAR_ZERO];
+    if (typeof delta === 'undefined') throw new Error('No data for year: ' + year + ' BS');
+    return 29 + (delta >>> (month - 1 << 1) & 3);
+}
+class $6d143e82714b55de$export$d3a3277d294231d extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {
+    fromJulianDay(jd) {
+        // Gregorian date for Julian day
+        let date = super.fromJulianDay(jd);
+        var m, dM, year = $6d143e82714b55de$var$VIKRAM_YEAR_ZERO, days = Math.floor((Date.parse(date.toString()) - $6d143e82714b55de$var$VIKRAM_SAMVAT_EPOCH) / $6d143e82714b55de$var$MS_PER_DAY) + 1;
+        while(days > 0){
+            for(m = 1; m <= 12; ++m){
+                dM = $6d143e82714b55de$var$_getDaysInMonth(year, m);
+                if (days <= dM) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, m, days);
+                days -= dM;
+            }
+            ++year;
+        }
+        throw new Error('Date outside supported range: ' + jd + ' AD');
+    }
+    toJulianDay(date) {
+        if (date.year < $6d143e82714b55de$var$VIKRAM_YEAR_ZERO) throw new Error('Invalid year value: ' + date.year);
+        if (date.day < 1 || date.day > $6d143e82714b55de$var$_getDaysInMonth(date.year, date.month)) throw new Error('Invalid day value: ' + date.day);
+        let timestamp = $6d143e82714b55de$var$VIKRAM_SAMVAT_EPOCH + $6d143e82714b55de$var$MS_PER_DAY * date.day;
+        let { year: year, month: month } = date;
+        month -= 1;
+        while(year >= $6d143e82714b55de$var$VIKRAM_YEAR_ZERO){
+            while(month > 0){
+                timestamp += $6d143e82714b55de$var$MS_PER_DAY * $6d143e82714b55de$var$_getDaysInMonth(year, month);
+                month--;
+            }
+            month = 12;
+            year--;
+        }
+        const jsdate = new Date(timestamp);
+        return (0, $3b62074eb05584b2$export$f297eb839006d339)('AD', jsdate.getUTCFullYear(), jsdate.getUTCMonth() + 1, jsdate.getUTCDate());
+    }
+    getDaysInMonth(date) {
+        return $6d143e82714b55de$var$_getDaysInMonth(date.year, date.month);
+    }
+    getYearsInEra() {
+        return $6d143e82714b55de$var$VIKRAM_YEAR_ZERO + $6d143e82714b55de$var$ENCODED_MONTH_LENGTHS.length - 1;
+    }
+    getEras() {
+        return [
+            'BS'
+        ];
+    }
+    balanceDate() {}
+    constructor(...args){
+        super(...args), this.identifier = 'nepali';
+    }
+}
+
+
+export {$6d143e82714b55de$export$d3a3277d294231d as NepaliCalendar};
+//# sourceMappingURL=NepaliCalendar.module.js.map
diff --git a/dist/NepaliCalendar.module.js.map b/dist/NepaliCalendar.module.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..5dcc7db52e4f2c32713a0e573bbf855d4ca24d47
--- /dev/null
+++ b/dist/NepaliCalendar.module.js.map
@@ -0,0 +1 @@
+{"mappings":";;;AAAA;;;;;;;;;;CAUC,GAED,gEAAgE;AAChE,gGAAgG;;;AAMhG,MAAM,mCAAa;AACnB,MAAM,4CAAsB;AAE5B,MAAM,yCAAmB;AAEzB,MAAM,8CAAwmG,OAAO;CAC3G;AAED,SAAS,sCAAgB,IAAY,EAAE,KAAa;IAClD,IAAI,QAAQ,KAAK,QAAQ,IAAK,MAAM,IAAI,MAAM,0BAA0B;IAExE,MAAM,QAAQ,2CAAqB,CAAC,OAAO,uCAAiB;IAC5D,IAAI,OAAO,UAAU,aAAc,MAAM,IAAI,MAAM,uBAAuB,OAAO;IAEjF,OAAO,KAAM,CAAA,AAAC,UAAY,CAAA,AAAC,QAAQ,KAAM,CAAA,IAAO,CAAA;AAClD;AAOO,MAAM,iDAAuB,CAAA,GAAA,yCAAgB;IAGlD,cAAc,EAAU,EAAgB;QACtC,gCAAgC;QAChC,IAAI,OAAO,KAAK,CAAC,cAAc;QAE/B,IAAI,GAAG,IAAI,OAAO,wCAAkB,OAAO,KAAK,KAAK,CAAC,AAAC,CAAA,KAAK,KAAK,CAAC,KAAK,QAAQ,MAAM,yCAAkB,IAAK,oCAAc;QAE1H,MAAO,OAAO,EAAG;YACf,IAAK,IAAI,GAAG,KAAK,IAAI,EAAE,EAAG;gBACxB,KAAK,sCAAgB,MAAM;gBAC3B,IAAI,QAAQ,IAAK,OAAO,IAAI,CAAA,GAAA,yCAAW,EAAE,IAAI,EAAE,MAAM,GAAG;gBACxD,QAAQ;YACV;YACA,EAAE;QACJ;QAEA,MAAM,IAAI,MAAM,mCAAmC,KAAK;IAC1D;IAEA,YAAY,IAAqB,EAAU;QACzC,IAAI,KAAK,IAAI,GAAG,wCAAmB,MAAM,IAAI,MAAM,yBAAyB,KAAK,IAAI;QACrF,IAAI,KAAK,GAAG,GAAG,KAAK,KAAK,GAAG,GAAG,sCAAgB,KAAK,IAAI,EAAE,KAAK,KAAK,GAAI,MAAM,IAAI,MAAM,wBAAwB,KAAK,GAAG;QAExH,IAAI,YAAY,4CAAuB,mCAAa,KAAK,GAAG;QAG5D,IAAI,QAAC,IAAI,SAAE,KAAK,EAAC,GAAG;QAEpB,SAAS;QAET,MAAO,QAAQ,uCAAkB;YAC/B,MAAO,QAAQ,EAAG;gBAChB,aAAc,mCAAa,sCAAgB,MAAM;gBACjD;YACF;YACA,QAAQ;YACR;QACF;QAEA,MAAM,SAAS,IAAI,KAAK;QAExB,OAAO,CAAA,GAAA,yCAAmB,EAAE,MAAM,OAAO,cAAc,IAAI,OAAO,WAAW,KAAK,GAAG,OAAO,UAAU;IACxG;IAEA,eAAe,IAAqB,EAAU;QAC5C,OAAO,sCAAgB,KAAK,IAAI,EAAE,KAAK,KAAK;IAC9C;IAEA,gBAAwB;QACtB,OAAO,yCAAmB,4CAAsB,MAAM,GAAG;IAC3D;IAEA,UAAoB;QAClB,OAAO;YAAC;SAAK;IACf;IAEA,cAAoB,CAAC;;QA1DhB,qBACL,aAAa;;AA0Df","sources":["packages/@internationalized/date/src/calendars/NepaliCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, CalendarIdentifier} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar, gregorianToJulianDay} from './GregorianCalendar';\n\nconst MS_PER_DAY = 86400000;\nconst VIKRAM_SAMVAT_EPOCH = -1789990200000;\n\nconst VIKRAM_YEAR_ZERO = 1970;\n\nconst ENCODED_MONTH_LENGTHS = [\n  0x511aba, 0x5117ba, 0x9056ee, 0x8456ed, 0x511aba, 0x5119fa, 0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, // 1970-1979\n  0x9056ee, 0x514aea, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, // 1980-1989\n  0x511aba, 0x5116ee, 0x8456ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aba, 0x511aba, 0x9056ee, // 1990-1999\n  0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aea, 0x511aba, // 2000-2009\n  0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x8456ee, // 2010-2019\n  0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aea, 0x511aba, 0x9056ee, 0x8456ed, 0x511aba, 0x5117ba, // 2020-2029\n  0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aed, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, // 2030-2039\n  0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, 0x511aba, 0x5056ee, // 2040-2049\n  0x8456ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aba, 0x5117ba, 0x9056ee, 0x8456ed, 0x511aba, // 2050-2059\n  0x5116fa, 0x9056ee, 0x844aed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aea, 0x511aba, 0x5116fa, 0x9056ee, // 2060-2069\n  0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aea, 0x511aba, // 2070-2079\n  0x5056ee, 0x5456ee, 0x5456ed, 0x5456ba, 0x5456ba, 0x5459ee, 0x5456ed, 0x545aba, 0x5459f9, 0x5456ed, // 2080-2089\n  0x5456ed                                                                                           // 2090\n];\n\nfunction _getDaysInMonth(year: number, month: number) {\n  if (month < 1 || month > 12) {throw new Error('Invalid month value: ' + month);}\n\n  const delta = ENCODED_MONTH_LENGTHS[year - VIKRAM_YEAR_ZERO];\n  if (typeof delta === 'undefined') {throw new Error('No data for year: ' + year + ' BS');}\n\n  return 29 + ((delta >>> (((month - 1) << 1))) & 3);\n}\n\n/**\n * The Vikram Samvat Calendar is a historical Hindu calendar used in the Indian subcontinent and Nepal.\n * Years are counted from 57 BCE. The calendar is primarily used in Nepal and among Hindus\n * in North India. Only one era identifier is supported: 'vikram'.\n */\nexport class NepaliCalendar extends GregorianCalendar {\n  identifier = 'nepali' as CalendarIdentifier;\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    var m, dM, year = VIKRAM_YEAR_ZERO, days = Math.floor((Date.parse(date.toString()) - VIKRAM_SAMVAT_EPOCH) / MS_PER_DAY) + 1;\n\n    while (days > 0) {\n      for (m = 1; m <= 12; ++m) {\n        dM = _getDaysInMonth(year, m);\n        if (days <= dM) {return new CalendarDate(this, year, m, days);}\n        days -= dM;\n      }\n      ++year;\n    }\n\n    throw new Error('Date outside supported range: ' + jd + ' AD');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < VIKRAM_YEAR_ZERO) {throw new Error('Invalid year value: ' + date.year);}\n    if (date.day < 1 || date.day > _getDaysInMonth(date.year, date.month)) {throw new Error('Invalid day value: ' + date.day);}\n\n    let timestamp = VIKRAM_SAMVAT_EPOCH + (MS_PER_DAY * date.day);\n\n\n    let {year, month} = date;\n\n    month -= 1;\n\n    while (year >= VIKRAM_YEAR_ZERO) {\n      while (month > 0) {\n        timestamp += (MS_PER_DAY * _getDaysInMonth(year, month));\n        month--;\n      }\n      month = 12;\n      year--;\n    }\n\n    const jsdate = new Date(timestamp);\n\n    return gregorianToJulianDay('AD', jsdate.getUTCFullYear(), jsdate.getUTCMonth() + 1, jsdate.getUTCDate());\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return _getDaysInMonth(date.year, date.month);\n  }\n\n  getYearsInEra(): number {\n    return VIKRAM_YEAR_ZERO + ENCODED_MONTH_LENGTHS.length - 1;\n  }\n\n  getEras(): string[] {\n    return ['BS'];\n  }\n\n  balanceDate(): void {}\n}\n"],"names":[],"version":3,"file":"NepaliCalendar.module.js.map"}
\ No newline at end of file
diff --git a/dist/NepaliDateTimeFormat.main.js b/dist/NepaliDateTimeFormat.main.js
new file mode 100644
index 0000000000000000000000000000000000000000..c3b8db24369d1374b2aa41c33bac142fc64af16d
--- /dev/null
+++ b/dist/NepaliDateTimeFormat.main.js
@@ -0,0 +1,301 @@
+var $af14c9812fdceb33$exports = require("./GregorianCalendar.main.js");
+var $fe18f90f992fac43$exports = require("./NepaliCalendar.main.js");
+
+
+function $parcel$export(e, n, v, s) {
+  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
+}
+
+$parcel$export(module.exports, "NepaliDateTimeFormat", () => $04527da2aa5c2c8d$export$26111daf82bf03cd);
+
+
+class $04527da2aa5c2c8d$export$26111daf82bf03cd {
+    /**
+   * Convert a JavaScript Date to a Nepali date object.
+   */ toNepaliDate(date) {
+        const julianDay = (0, $af14c9812fdceb33$exports.gregorianToJulianDay)('AD', date.getFullYear(), date.getMonth() + 1, date.getDate());
+        return this.calendar.fromJulianDay(julianDay);
+    }
+    /**
+   * Format a date according to the locale and options.
+   */ format(date) {
+        if (date === undefined) date = new Date();
+        else if (typeof date === 'number') date = new Date(date);
+        // Get parts from internal formatter
+        const parts = this.formatToParts(date);
+        // Combine parts into a string
+        return parts.map((part)=>part.value).join('');
+    }
+    /**
+   * Format a date to parts according to the locale and options.
+   */ formatToParts(date) {
+        if (date === undefined) date = new Date();
+        else if (typeof date === 'number') date = new Date(date);
+        const nepaliDate = this.toNepaliDate(date);
+        // Get parts from internal formatter first
+        const parts = this.internalFormatter.formatToParts(date);
+        // Replace year, month, and day values with Nepali equivalents
+        return parts.map((part)=>{
+            const newPart = {
+                ...part
+            };
+            if (part.type === 'year') newPart.value = this.formatNepaliValue(nepaliDate.year);
+            else if (part.type === 'month') newPart.value = this.formatNepaliMonth(nepaliDate.month, part.value);
+            else if (part.type === 'day') newPart.value = this.formatNepaliValue(nepaliDate.day);
+            else if (part.type === 'weekday') ;
+            else if (part.type === 'era') newPart.value = this.formatNepaliEra();
+            return newPart;
+        });
+    }
+    /**
+   * Format a date range according to the locale and options.
+   */ formatRange(startDate, endDate) {
+        // Convert to Date objects if numbers
+        if (typeof startDate === 'number') startDate = new Date(startDate);
+        if (typeof endDate === 'number') endDate = new Date(endDate);
+        // Get parts from formatRangeToParts
+        const parts = this.formatRangeToParts(startDate, endDate);
+        // Combine parts into a string
+        return parts.map((part)=>part.value).join('');
+    }
+    /**
+   * Format a date range to parts according to the locale and options.
+   */ formatRangeToParts(startDate, endDate) {
+        // Convert to Date objects if numbers
+        if (typeof startDate === 'number') startDate = new Date(startDate);
+        if (typeof endDate === 'number') endDate = new Date(endDate);
+        // Get Nepali dates
+        const nepaliStartDate = this.toNepaliDate(startDate);
+        const nepaliEndDate = this.toNepaliDate(endDate);
+        // Use internal formatter to get range parts
+        const rangeParts = this.internalFormatter.formatRangeToParts(startDate, endDate);
+        // Replace year, month, and day values with Nepali equivalents
+        return rangeParts.map((part)=>{
+            const newPart = {
+                ...part
+            };
+            if (part.type === 'year') {
+                const nepaliYear = part.source === 'startRange' ? nepaliStartDate.year : nepaliEndDate.year;
+                newPart.value = this.formatNepaliValue(nepaliYear);
+            } else if (part.type === 'month') {
+                const nepaliMonth = part.source === 'startRange' ? nepaliStartDate.month : nepaliEndDate.month;
+                newPart.value = this.formatNepaliMonth(nepaliMonth, part.value);
+            } else if (part.type === 'day') {
+                const nepaliDay = part.source === 'startRange' ? nepaliStartDate.day : nepaliEndDate.day;
+                newPart.value = this.formatNepaliValue(nepaliDay);
+            } else if (part.type === 'era') // Use appropriate era name based on locale
+            newPart.value = this.locale.startsWith('ne') ? "\u092C\u093F.\u0938\u0902." : 'BS'; // Bikram Sambat
+            return newPart;
+        });
+    }
+    /**
+   * Format a numeric value using Nepali/Devanagari digits if the locale requires it.
+   */ formatNepaliValue(value) {
+        // Check if we should use Devanagari digits based on locale and numberingSystem
+        const useDevanagariDigits = this.locale.startsWith('ne') || this.options.numberingSystem === 'deva';
+        if (useDevanagariDigits) return value.toString().replace(/\d/g, (digit)=>String.fromCharCode(0x0966 + Number.parseInt(digit, 10)) // 0x0966 is the Unicode code point for Devanagari digit 0
+        );
+        return value.toString();
+    }
+    /**
+   * Format a month value according to the format type used in original part.
+   */ formatNepaliMonth(month, originalFormat) {
+        // Define Nepali month names (for Nepali locale)
+        const nepaliMonths = {
+            long: [
+                "\u092C\u0948\u0936\u093E\u0916",
+                "\u091C\u0947\u0920",
+                "\u0905\u0938\u093E\u0930",
+                "\u0936\u094D\u0930\u093E\u0935\u0923",
+                "\u092D\u093E\u0926\u094D\u0930",
+                "\u0906\u0936\u094D\u0935\u093F\u0928",
+                "\u0915\u093E\u0930\u094D\u0924\u093F\u0915",
+                "\u092E\u0902\u0938\u093F\u0930",
+                "\u092A\u094C\u0937",
+                "\u092E\u093E\u0918",
+                "\u092B\u093E\u0932\u094D\u0917\u0941\u0928",
+                "\u091A\u0948\u0924\u094D\u0930"
+            ],
+            short: [
+                "\u092C\u0948\u0936\u093E\u0916",
+                "\u091C\u0947\u0920",
+                "\u0905\u0938\u093E\u0930",
+                "\u0936\u094D\u0930\u093E\u0935\u0923",
+                "\u092D\u093E\u0926\u094D\u0930",
+                "\u0906\u0936\u094D\u0935\u093F\u0928",
+                "\u0915\u093E\u0930\u094D\u0924\u093F\u0915",
+                "\u092E\u0902\u0938\u093F\u0930",
+                "\u092A\u094C\u0937",
+                "\u092E\u093E\u0918",
+                "\u092B\u093E\u0932\u094D\u0917\u0941\u0928",
+                "\u091A\u0948\u0924\u094D\u0930"
+            ],
+            narrow: [
+                "\u092C\u0948",
+                "\u091C\u0947",
+                "\u0905",
+                "\u0936\u094D\u0930\u093E",
+                "\u092D\u093E",
+                "\u0906",
+                "\u0915\u093E",
+                "\u092E\u0902",
+                "\u092A\u094C",
+                "\u092E\u093E",
+                "\u092B\u093E",
+                "\u091A\u0948"
+            ]
+        };
+        // Define transliterated month names (for non-Nepali locales)
+        const transliteratedMonths = {
+            long: [
+                'Baisakh',
+                'Jestha',
+                'Asadh',
+                'Shrawan',
+                'Bhadra',
+                'Ashwin',
+                'Kartik',
+                'Mangsir',
+                'Poush',
+                'Magh',
+                'Falgun',
+                'Chaitra'
+            ],
+            short: [
+                'Bai',
+                'Jes',
+                'Asa',
+                'Shr',
+                'Bha',
+                'Ash',
+                'Kar',
+                'Man',
+                'Pou',
+                'Mag',
+                'Fal',
+                'Cha'
+            ],
+            narrow: [
+                'B',
+                'J',
+                'A',
+                'S',
+                'B',
+                'A',
+                'K',
+                'M',
+                'P',
+                'M',
+                'F',
+                'C'
+            ]
+        };
+        // Choose the appropriate month names based on locale
+        const monthNames = this.locale.startsWith('ne') ? nepaliMonths : transliteratedMonths;
+        if (/^\d+$/.test(originalFormat)) {
+            let formattedMonth = this.formatNepaliValue(month);
+            if (originalFormat.length === 2) formattedMonth = formattedMonth.padStart(2, this.formatNepaliValue(0).charAt(0));
+            return formattedMonth;
+        }
+        // Determine the format type based on both month and dateStyle options
+        let formatType;
+        if (this.options.month) formatType = this.options.month;
+        else if (this.options.dateStyle) // Map dateStyle to appropriate month format
+        switch(this.options.dateStyle){
+            case 'full':
+            case 'long':
+                formatType = 'long';
+                break;
+            case 'medium':
+                formatType = 'short';
+                break;
+            case 'short':
+                formatType = 'numeric';
+                break;
+            default:
+                formatType = 'long';
+        }
+        else // Default to long format if no options specified
+        formatType = 'long';
+        // Format the month according to the determined format type
+        switch(formatType){
+            case 'numeric':
+                return this.formatNepaliValue(month);
+            case '2-digit':
+                return this.formatNepaliValue(month).padStart(2, this.formatNepaliValue(0).charAt(0));
+            case 'narrow':
+                return monthNames.narrow[month - 1];
+            case 'short':
+                return monthNames.short[month - 1];
+            case 'long':
+                return monthNames.long[month - 1];
+        }
+    }
+    formatNepaliEra() {
+        // Define Nepali era names
+        const nepaliEra = {
+            long: "\u092C\u093F\u0915\u094D\u0930\u092E \u0938\u092E\u094D\u092C\u0924",
+            short: "\u092C\u093F.\u0938\u0902.",
+            narrow: "\u092C\u093F.\u0938\u0902."
+        };
+        // Define transliterated era names
+        const transliteratedEra = {
+            long: 'Bikram Sambat',
+            short: 'BS',
+            narrow: 'BS'
+        };
+        // Choose the appropriate era names based on locale
+        const eraNames = this.locale.startsWith('ne') ? nepaliEra : transliteratedEra;
+        // Determine the format type based on era option
+        let formatType;
+        if (this.options.era) formatType = this.options.era;
+        else if (this.options.dateStyle) // Map dateStyle to appropriate era format
+        switch(this.options.dateStyle){
+            case 'full':
+            case 'long':
+                formatType = 'long';
+                break;
+            case 'medium':
+                formatType = 'short';
+                break;
+            case 'short':
+                formatType = 'narrow';
+                break;
+            default:
+                formatType = 'short';
+        }
+        else // Default to short format if no options specified
+        formatType = 'short';
+        return eraNames[formatType];
+    }
+    /**
+   * Get the resolved options used for formatting.
+   */ resolvedOptions() {
+        const resolved = this.internalFormatter.resolvedOptions();
+        // Override calendar and numberingSystem
+        resolved.calendar = 'nepali';
+        // Use Devanagari numbering system for Nepali locale
+        if (this.locale.startsWith('ne')) resolved.numberingSystem = 'deva';
+        return resolved;
+    }
+    /**
+   * Static method to check which locales are supported.
+   */ static supportedLocalesOf(locales, options) {
+        // For now, simply delegate to the internal formatter's supportedLocalesOf
+        return Intl.DateTimeFormat.supportedLocalesOf(locales, options);
+    }
+    constructor(locale, options = {}){
+        this.locale = locale;
+        this.options = {
+            ...options,
+            calendar: 'gregory'
+        }; // Use gregory for internal formatting
+        // Create a similar formatter without the nepali calendar for fallback formatting
+        this.internalFormatter = new Intl.DateTimeFormat(locale, this.options);
+        // Initialize the nepali calendar
+        this.calendar = new (0, $fe18f90f992fac43$exports.NepaliCalendar)();
+    }
+}
+
+
+//# sourceMappingURL=NepaliDateTimeFormat.main.js.map
diff --git a/dist/NepaliDateTimeFormat.main.js.map b/dist/NepaliDateTimeFormat.main.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..436fff04bbbd716d720d070dcf013c54a668ee4f
--- /dev/null
+++ b/dist/NepaliDateTimeFormat.main.js.map
@@ -0,0 +1 @@
+{"mappings":"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","sources":["packages/@internationalized/date/src/NepaliDateTimeFormat.ts"],"sourcesContent":["import {AnyCalendarDate} from './types';\nimport {gregorianToJulianDay} from './calendars/GregorianCalendar';\nimport {NepaliCalendar} from './calendars/NepaliCalendar';\n\nexport class NepaliDateTimeFormat implements Intl.DateTimeFormat {\n  private locale: string;\n  private options: Intl.DateTimeFormatOptions;\n  private calendar: NepaliCalendar;\n  private internalFormatter: Intl.DateTimeFormat;\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.locale = locale;\n    this.options = {...options, calendar: 'gregory'}; // Use gregory for internal formatting\n\n    // Create a similar formatter without the nepali calendar for fallback formatting\n    this.internalFormatter = new Intl.DateTimeFormat(locale, this.options);\n\n    // Initialize the nepali calendar\n    this.calendar = new NepaliCalendar();\n  }\n\n  /**\n   * Convert a JavaScript Date to a Nepali date object.\n   */\n  private toNepaliDate(date: Date): AnyCalendarDate {\n    const julianDay = gregorianToJulianDay(\n      'AD',\n      date.getFullYear(),\n      date.getMonth() + 1,\n      date.getDate()\n    );\n    return this.calendar.fromJulianDay(julianDay);\n  }\n\n  /**\n   * Format a date according to the locale and options.\n   */\n  format(date?: Date | number): string {\n    if (date === undefined) {\n      date = new Date();\n    } else if (typeof date === 'number') {\n      date = new Date(date);\n    }\n\n    // Get parts from internal formatter\n    const parts = this.formatToParts(date);\n\n    // Combine parts into a string\n    return parts.map(part => part.value).join('');\n  }\n\n  /**\n   * Format a date to parts according to the locale and options.\n   */\n  formatToParts(date?: Date | number): Intl.DateTimeFormatPart[] {\n    if (date === undefined) {\n      date = new Date();\n    } else if (typeof date === 'number') {\n      date = new Date(date);\n    }\n\n    const nepaliDate = this.toNepaliDate(date);\n\n    // Get parts from internal formatter first\n    const parts = this.internalFormatter.formatToParts(date);\n\n    // Replace year, month, and day values with Nepali equivalents\n    return parts.map(part => {\n      const newPart = {...part};\n\n      if (part.type === 'year') {\n        newPart.value = this.formatNepaliValue(nepaliDate.year);\n      } else if (part.type === 'month') {\n        newPart.value = this.formatNepaliMonth(nepaliDate.month, part.value);\n      } else if (part.type === 'day') {\n        newPart.value = this.formatNepaliValue(nepaliDate.day);\n      } else if (part.type === 'weekday') {\n        // Keep original weekday as days of week align between calendars\n      } else if (part.type === 'era') {\n        newPart.value = this.formatNepaliEra();\n      }\n\n\n      return newPart;\n    });\n  }\n\n  /**\n   * Format a date range according to the locale and options.\n   */\n  formatRange(startDate: Date | number, endDate: Date | number): string {\n    // Convert to Date objects if numbers\n    if (typeof startDate === 'number') {\n      startDate = new Date(startDate);\n    }\n    if (typeof endDate === 'number') {\n      endDate = new Date(endDate);\n    }\n\n    // Get parts from formatRangeToParts\n    const parts = this.formatRangeToParts(startDate, endDate);\n\n    // Combine parts into a string\n    return parts.map(part => part.value).join('');\n  }\n\n  /**\n   * Format a date range to parts according to the locale and options.\n   */\n  formatRangeToParts(startDate: Date | number, endDate: Date | number): Intl.DateTimeRangeFormatPart[] {\n    // Convert to Date objects if numbers\n    if (typeof startDate === 'number') {\n      startDate = new Date(startDate);\n    }\n    if (typeof endDate === 'number') {\n      endDate = new Date(endDate);\n    }\n\n    // Get Nepali dates\n    const nepaliStartDate = this.toNepaliDate(startDate);\n    const nepaliEndDate = this.toNepaliDate(endDate);\n\n    // Use internal formatter to get range parts\n    const rangeParts = this.internalFormatter.formatRangeToParts(startDate, endDate);\n\n    // Replace year, month, and day values with Nepali equivalents\n    return rangeParts.map(part => {\n      const newPart = {...part};\n\n      if (part.type === 'year') {\n        const nepaliYear = part.source === 'startRange' ? nepaliStartDate.year : nepaliEndDate.year;\n        newPart.value = this.formatNepaliValue(nepaliYear);\n      } else if (part.type === 'month') {\n        const nepaliMonth = part.source === 'startRange' ? nepaliStartDate.month : nepaliEndDate.month;\n        newPart.value = this.formatNepaliMonth(nepaliMonth, part.value);\n      } else if (part.type === 'day') {\n        const nepaliDay = part.source === 'startRange' ? nepaliStartDate.day : nepaliEndDate.day;\n        newPart.value = this.formatNepaliValue(nepaliDay);\n      } else if (part.type === 'era') {\n        // Use appropriate era name based on locale\n        newPart.value = this.locale.startsWith('ne') ? 'बि.सं.' : 'BS'; // Bikram Sambat\n      }\n\n      return newPart;\n    });\n  }\n\n  /**\n   * Format a numeric value using Nepali/Devanagari digits if the locale requires it.\n   */\n  private formatNepaliValue(value: number): string {\n    // Check if we should use Devanagari digits based on locale and numberingSystem\n    const useDevanagariDigits = this.locale.startsWith('ne') ||\n                                this.options.numberingSystem === 'deva';\n\n    if (useDevanagariDigits) {\n      return value.toString().replace(/\\d/g, digit =>\n        String.fromCharCode(0x0966 + Number.parseInt(digit, 10)) // 0x0966 is the Unicode code point for Devanagari digit 0\n      );\n    }\n\n    return value.toString();\n  }\n\n  /**\n   * Format a month value according to the format type used in original part.\n   */\n  private formatNepaliMonth(month: number, originalFormat: string): string {\n    // Define Nepali month names (for Nepali locale)\n    const nepaliMonths = {\n      long: [\n        'बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन',\n        'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'\n      ],\n      short: [\n        'बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन',\n        'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'\n      ],\n      narrow: [\n        'बै', 'जे', 'अ', 'श्रा', 'भा', 'आ',\n        'का', 'मं', 'पौ', 'मा', 'फा', 'चै'\n      ]\n    };\n\n    // Define transliterated month names (for non-Nepali locales)\n    const transliteratedMonths = {\n      long: [\n        'Baisakh', 'Jestha', 'Asadh', 'Shrawan', 'Bhadra', 'Ashwin',\n        'Kartik', 'Mangsir', 'Poush', 'Magh', 'Falgun', 'Chaitra'\n      ],\n      short: [\n        'Bai', 'Jes', 'Asa', 'Shr', 'Bha', 'Ash',\n        'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'\n      ],\n      narrow: [\n        'B', 'J', 'A', 'S', 'B', 'A',\n        'K', 'M', 'P', 'M', 'F', 'C'\n      ]\n    };\n\n    // Choose the appropriate month names based on locale\n    const monthNames = this.locale.startsWith('ne') ? nepaliMonths : transliteratedMonths;\n\n    if (/^\\d+$/.test(originalFormat)) {\n      let formattedMonth = this.formatNepaliValue(month);\n      if (originalFormat.length === 2) {\n        formattedMonth = formattedMonth.padStart(2, this.formatNepaliValue(0).charAt(0));\n      }\n      return formattedMonth;\n    }\n\n    // Determine the format type based on both month and dateStyle options\n    let formatType: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';\n\n    if (this.options.month) {\n      formatType = this.options.month;\n    } else if (this.options.dateStyle) {\n      // Map dateStyle to appropriate month format\n      switch (this.options.dateStyle) {\n        case 'full':\n        case 'long':\n          formatType = 'long';\n          break;\n        case 'medium':\n          formatType = 'short';\n          break;\n        case 'short':\n          formatType = 'numeric';\n          break;\n        default:\n          formatType = 'long';\n      }\n    } else {\n      // Default to long format if no options specified\n      formatType = 'long';\n    }\n\n    // Format the month according to the determined format type\n    switch (formatType) {\n      case 'numeric':\n        return this.formatNepaliValue(month);\n      case '2-digit':\n        return this.formatNepaliValue(month).padStart(2, this.formatNepaliValue(0).charAt(0));\n      case 'narrow':\n        return monthNames.narrow[month - 1];\n      case 'short':\n        return monthNames.short[month - 1];\n      case 'long':\n        return monthNames.long[month - 1];\n    }\n  }\n\n  private formatNepaliEra(): string {\n    // Define Nepali era names\n    const nepaliEra = {\n      long: 'बिक्रम सम्बत',\n      short: 'बि.सं.',\n      narrow: 'बि.सं.'\n    };\n\n    // Define transliterated era names\n    const transliteratedEra = {\n      long: 'Bikram Sambat',\n      short: 'BS',\n      narrow: 'BS'\n    };\n\n    // Choose the appropriate era names based on locale\n    const eraNames = this.locale.startsWith('ne') ? nepaliEra : transliteratedEra;\n\n    // Determine the format type based on era option\n    let formatType: 'long' | 'short' | 'narrow';\n\n    if (this.options.era) {\n      formatType = this.options.era;\n    } else if (this.options.dateStyle) {\n      // Map dateStyle to appropriate era format\n      switch (this.options.dateStyle) {\n        case 'full':\n        case 'long':\n          formatType = 'long';\n          break;\n        case 'medium':\n          formatType = 'short';\n          break;\n        case 'short':\n          formatType = 'narrow';\n          break;\n        default:\n          formatType = 'short';\n      }\n    } else {\n      // Default to short format if no options specified\n      formatType = 'short';\n    }\n\n    return eraNames[formatType];\n  }\n\n  /**\n   * Get the resolved options used for formatting.\n   */\n  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {\n    const resolved = this.internalFormatter.resolvedOptions();\n\n    // Override calendar and numberingSystem\n    resolved.calendar = 'nepali';\n\n    // Use Devanagari numbering system for Nepali locale\n    if (this.locale.startsWith('ne')) {\n      resolved.numberingSystem = 'deva';\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Static method to check which locales are supported.\n   */\n  static supportedLocalesOf(\n    locales: string | string[],\n    options?: Intl.DateTimeFormatOptions\n  ): string[] {\n    // For now, simply delegate to the internal formatter's supportedLocalesOf\n    return Intl.DateTimeFormat.supportedLocalesOf(locales, options);\n  }\n}\n"],"names":[],"version":3,"file":"NepaliDateTimeFormat.main.js.map"}
\ No newline at end of file
diff --git a/dist/NepaliDateTimeFormat.mjs b/dist/NepaliDateTimeFormat.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..6fd04805d563f192d2803dc7d02a40d29c364db7
--- /dev/null
+++ b/dist/NepaliDateTimeFormat.mjs
@@ -0,0 +1,296 @@
+import {gregorianToJulianDay as $3b62074eb05584b2$export$f297eb839006d339} from "./GregorianCalendar.mjs";
+import {NepaliCalendar as $6d143e82714b55de$export$d3a3277d294231d} from "./NepaliCalendar.mjs";
+
+
+
+class $ce362947f989ca88$export$26111daf82bf03cd {
+    /**
+   * Convert a JavaScript Date to a Nepali date object.
+   */ toNepaliDate(date) {
+        const julianDay = (0, $3b62074eb05584b2$export$f297eb839006d339)('AD', date.getFullYear(), date.getMonth() + 1, date.getDate());
+        return this.calendar.fromJulianDay(julianDay);
+    }
+    /**
+   * Format a date according to the locale and options.
+   */ format(date) {
+        if (date === undefined) date = new Date();
+        else if (typeof date === 'number') date = new Date(date);
+        // Get parts from internal formatter
+        const parts = this.formatToParts(date);
+        // Combine parts into a string
+        return parts.map((part)=>part.value).join('');
+    }
+    /**
+   * Format a date to parts according to the locale and options.
+   */ formatToParts(date) {
+        if (date === undefined) date = new Date();
+        else if (typeof date === 'number') date = new Date(date);
+        const nepaliDate = this.toNepaliDate(date);
+        // Get parts from internal formatter first
+        const parts = this.internalFormatter.formatToParts(date);
+        // Replace year, month, and day values with Nepali equivalents
+        return parts.map((part)=>{
+            const newPart = {
+                ...part
+            };
+            if (part.type === 'year') newPart.value = this.formatNepaliValue(nepaliDate.year);
+            else if (part.type === 'month') newPart.value = this.formatNepaliMonth(nepaliDate.month, part.value);
+            else if (part.type === 'day') newPart.value = this.formatNepaliValue(nepaliDate.day);
+            else if (part.type === 'weekday') ;
+            else if (part.type === 'era') newPart.value = this.formatNepaliEra();
+            return newPart;
+        });
+    }
+    /**
+   * Format a date range according to the locale and options.
+   */ formatRange(startDate, endDate) {
+        // Convert to Date objects if numbers
+        if (typeof startDate === 'number') startDate = new Date(startDate);
+        if (typeof endDate === 'number') endDate = new Date(endDate);
+        // Get parts from formatRangeToParts
+        const parts = this.formatRangeToParts(startDate, endDate);
+        // Combine parts into a string
+        return parts.map((part)=>part.value).join('');
+    }
+    /**
+   * Format a date range to parts according to the locale and options.
+   */ formatRangeToParts(startDate, endDate) {
+        // Convert to Date objects if numbers
+        if (typeof startDate === 'number') startDate = new Date(startDate);
+        if (typeof endDate === 'number') endDate = new Date(endDate);
+        // Get Nepali dates
+        const nepaliStartDate = this.toNepaliDate(startDate);
+        const nepaliEndDate = this.toNepaliDate(endDate);
+        // Use internal formatter to get range parts
+        const rangeParts = this.internalFormatter.formatRangeToParts(startDate, endDate);
+        // Replace year, month, and day values with Nepali equivalents
+        return rangeParts.map((part)=>{
+            const newPart = {
+                ...part
+            };
+            if (part.type === 'year') {
+                const nepaliYear = part.source === 'startRange' ? nepaliStartDate.year : nepaliEndDate.year;
+                newPart.value = this.formatNepaliValue(nepaliYear);
+            } else if (part.type === 'month') {
+                const nepaliMonth = part.source === 'startRange' ? nepaliStartDate.month : nepaliEndDate.month;
+                newPart.value = this.formatNepaliMonth(nepaliMonth, part.value);
+            } else if (part.type === 'day') {
+                const nepaliDay = part.source === 'startRange' ? nepaliStartDate.day : nepaliEndDate.day;
+                newPart.value = this.formatNepaliValue(nepaliDay);
+            } else if (part.type === 'era') // Use appropriate era name based on locale
+            newPart.value = this.locale.startsWith('ne') ? "\u092C\u093F.\u0938\u0902." : 'BS'; // Bikram Sambat
+            return newPart;
+        });
+    }
+    /**
+   * Format a numeric value using Nepali/Devanagari digits if the locale requires it.
+   */ formatNepaliValue(value) {
+        // Check if we should use Devanagari digits based on locale and numberingSystem
+        const useDevanagariDigits = this.locale.startsWith('ne') || this.options.numberingSystem === 'deva';
+        if (useDevanagariDigits) return value.toString().replace(/\d/g, (digit)=>String.fromCharCode(0x0966 + Number.parseInt(digit, 10)) // 0x0966 is the Unicode code point for Devanagari digit 0
+        );
+        return value.toString();
+    }
+    /**
+   * Format a month value according to the format type used in original part.
+   */ formatNepaliMonth(month, originalFormat) {
+        // Define Nepali month names (for Nepali locale)
+        const nepaliMonths = {
+            long: [
+                "\u092C\u0948\u0936\u093E\u0916",
+                "\u091C\u0947\u0920",
+                "\u0905\u0938\u093E\u0930",
+                "\u0936\u094D\u0930\u093E\u0935\u0923",
+                "\u092D\u093E\u0926\u094D\u0930",
+                "\u0906\u0936\u094D\u0935\u093F\u0928",
+                "\u0915\u093E\u0930\u094D\u0924\u093F\u0915",
+                "\u092E\u0902\u0938\u093F\u0930",
+                "\u092A\u094C\u0937",
+                "\u092E\u093E\u0918",
+                "\u092B\u093E\u0932\u094D\u0917\u0941\u0928",
+                "\u091A\u0948\u0924\u094D\u0930"
+            ],
+            short: [
+                "\u092C\u0948\u0936\u093E\u0916",
+                "\u091C\u0947\u0920",
+                "\u0905\u0938\u093E\u0930",
+                "\u0936\u094D\u0930\u093E\u0935\u0923",
+                "\u092D\u093E\u0926\u094D\u0930",
+                "\u0906\u0936\u094D\u0935\u093F\u0928",
+                "\u0915\u093E\u0930\u094D\u0924\u093F\u0915",
+                "\u092E\u0902\u0938\u093F\u0930",
+                "\u092A\u094C\u0937",
+                "\u092E\u093E\u0918",
+                "\u092B\u093E\u0932\u094D\u0917\u0941\u0928",
+                "\u091A\u0948\u0924\u094D\u0930"
+            ],
+            narrow: [
+                "\u092C\u0948",
+                "\u091C\u0947",
+                "\u0905",
+                "\u0936\u094D\u0930\u093E",
+                "\u092D\u093E",
+                "\u0906",
+                "\u0915\u093E",
+                "\u092E\u0902",
+                "\u092A\u094C",
+                "\u092E\u093E",
+                "\u092B\u093E",
+                "\u091A\u0948"
+            ]
+        };
+        // Define transliterated month names (for non-Nepali locales)
+        const transliteratedMonths = {
+            long: [
+                'Baisakh',
+                'Jestha',
+                'Asadh',
+                'Shrawan',
+                'Bhadra',
+                'Ashwin',
+                'Kartik',
+                'Mangsir',
+                'Poush',
+                'Magh',
+                'Falgun',
+                'Chaitra'
+            ],
+            short: [
+                'Bai',
+                'Jes',
+                'Asa',
+                'Shr',
+                'Bha',
+                'Ash',
+                'Kar',
+                'Man',
+                'Pou',
+                'Mag',
+                'Fal',
+                'Cha'
+            ],
+            narrow: [
+                'B',
+                'J',
+                'A',
+                'S',
+                'B',
+                'A',
+                'K',
+                'M',
+                'P',
+                'M',
+                'F',
+                'C'
+            ]
+        };
+        // Choose the appropriate month names based on locale
+        const monthNames = this.locale.startsWith('ne') ? nepaliMonths : transliteratedMonths;
+        if (/^\d+$/.test(originalFormat)) {
+            let formattedMonth = this.formatNepaliValue(month);
+            if (originalFormat.length === 2) formattedMonth = formattedMonth.padStart(2, this.formatNepaliValue(0).charAt(0));
+            return formattedMonth;
+        }
+        // Determine the format type based on both month and dateStyle options
+        let formatType;
+        if (this.options.month) formatType = this.options.month;
+        else if (this.options.dateStyle) // Map dateStyle to appropriate month format
+        switch(this.options.dateStyle){
+            case 'full':
+            case 'long':
+                formatType = 'long';
+                break;
+            case 'medium':
+                formatType = 'short';
+                break;
+            case 'short':
+                formatType = 'numeric';
+                break;
+            default:
+                formatType = 'long';
+        }
+        else // Default to long format if no options specified
+        formatType = 'long';
+        // Format the month according to the determined format type
+        switch(formatType){
+            case 'numeric':
+                return this.formatNepaliValue(month);
+            case '2-digit':
+                return this.formatNepaliValue(month).padStart(2, this.formatNepaliValue(0).charAt(0));
+            case 'narrow':
+                return monthNames.narrow[month - 1];
+            case 'short':
+                return monthNames.short[month - 1];
+            case 'long':
+                return monthNames.long[month - 1];
+        }
+    }
+    formatNepaliEra() {
+        // Define Nepali era names
+        const nepaliEra = {
+            long: "\u092C\u093F\u0915\u094D\u0930\u092E \u0938\u092E\u094D\u092C\u0924",
+            short: "\u092C\u093F.\u0938\u0902.",
+            narrow: "\u092C\u093F.\u0938\u0902."
+        };
+        // Define transliterated era names
+        const transliteratedEra = {
+            long: 'Bikram Sambat',
+            short: 'BS',
+            narrow: 'BS'
+        };
+        // Choose the appropriate era names based on locale
+        const eraNames = this.locale.startsWith('ne') ? nepaliEra : transliteratedEra;
+        // Determine the format type based on era option
+        let formatType;
+        if (this.options.era) formatType = this.options.era;
+        else if (this.options.dateStyle) // Map dateStyle to appropriate era format
+        switch(this.options.dateStyle){
+            case 'full':
+            case 'long':
+                formatType = 'long';
+                break;
+            case 'medium':
+                formatType = 'short';
+                break;
+            case 'short':
+                formatType = 'narrow';
+                break;
+            default:
+                formatType = 'short';
+        }
+        else // Default to short format if no options specified
+        formatType = 'short';
+        return eraNames[formatType];
+    }
+    /**
+   * Get the resolved options used for formatting.
+   */ resolvedOptions() {
+        const resolved = this.internalFormatter.resolvedOptions();
+        // Override calendar and numberingSystem
+        resolved.calendar = 'nepali';
+        // Use Devanagari numbering system for Nepali locale
+        if (this.locale.startsWith('ne')) resolved.numberingSystem = 'deva';
+        return resolved;
+    }
+    /**
+   * Static method to check which locales are supported.
+   */ static supportedLocalesOf(locales, options) {
+        // For now, simply delegate to the internal formatter's supportedLocalesOf
+        return Intl.DateTimeFormat.supportedLocalesOf(locales, options);
+    }
+    constructor(locale, options = {}){
+        this.locale = locale;
+        this.options = {
+            ...options,
+            calendar: 'gregory'
+        }; // Use gregory for internal formatting
+        // Create a similar formatter without the nepali calendar for fallback formatting
+        this.internalFormatter = new Intl.DateTimeFormat(locale, this.options);
+        // Initialize the nepali calendar
+        this.calendar = new (0, $6d143e82714b55de$export$d3a3277d294231d)();
+    }
+}
+
+
+export {$ce362947f989ca88$export$26111daf82bf03cd as NepaliDateTimeFormat};
+//# sourceMappingURL=NepaliDateTimeFormat.module.js.map
diff --git a/dist/NepaliDateTimeFormat.module.js b/dist/NepaliDateTimeFormat.module.js
new file mode 100644
index 0000000000000000000000000000000000000000..968b68361ee8aad4bcdc49b4933dc694618d4b6c
--- /dev/null
+++ b/dist/NepaliDateTimeFormat.module.js
@@ -0,0 +1,296 @@
+import {gregorianToJulianDay as $3b62074eb05584b2$export$f297eb839006d339} from "./GregorianCalendar.module.js";
+import {NepaliCalendar as $6d143e82714b55de$export$d3a3277d294231d} from "./NepaliCalendar.module.js";
+
+
+
+class $ce362947f989ca88$export$26111daf82bf03cd {
+    /**
+   * Convert a JavaScript Date to a Nepali date object.
+   */ toNepaliDate(date) {
+        const julianDay = (0, $3b62074eb05584b2$export$f297eb839006d339)('AD', date.getFullYear(), date.getMonth() + 1, date.getDate());
+        return this.calendar.fromJulianDay(julianDay);
+    }
+    /**
+   * Format a date according to the locale and options.
+   */ format(date) {
+        if (date === undefined) date = new Date();
+        else if (typeof date === 'number') date = new Date(date);
+        // Get parts from internal formatter
+        const parts = this.formatToParts(date);
+        // Combine parts into a string
+        return parts.map((part)=>part.value).join('');
+    }
+    /**
+   * Format a date to parts according to the locale and options.
+   */ formatToParts(date) {
+        if (date === undefined) date = new Date();
+        else if (typeof date === 'number') date = new Date(date);
+        const nepaliDate = this.toNepaliDate(date);
+        // Get parts from internal formatter first
+        const parts = this.internalFormatter.formatToParts(date);
+        // Replace year, month, and day values with Nepali equivalents
+        return parts.map((part)=>{
+            const newPart = {
+                ...part
+            };
+            if (part.type === 'year') newPart.value = this.formatNepaliValue(nepaliDate.year);
+            else if (part.type === 'month') newPart.value = this.formatNepaliMonth(nepaliDate.month, part.value);
+            else if (part.type === 'day') newPart.value = this.formatNepaliValue(nepaliDate.day);
+            else if (part.type === 'weekday') ;
+            else if (part.type === 'era') newPart.value = this.formatNepaliEra();
+            return newPart;
+        });
+    }
+    /**
+   * Format a date range according to the locale and options.
+   */ formatRange(startDate, endDate) {
+        // Convert to Date objects if numbers
+        if (typeof startDate === 'number') startDate = new Date(startDate);
+        if (typeof endDate === 'number') endDate = new Date(endDate);
+        // Get parts from formatRangeToParts
+        const parts = this.formatRangeToParts(startDate, endDate);
+        // Combine parts into a string
+        return parts.map((part)=>part.value).join('');
+    }
+    /**
+   * Format a date range to parts according to the locale and options.
+   */ formatRangeToParts(startDate, endDate) {
+        // Convert to Date objects if numbers
+        if (typeof startDate === 'number') startDate = new Date(startDate);
+        if (typeof endDate === 'number') endDate = new Date(endDate);
+        // Get Nepali dates
+        const nepaliStartDate = this.toNepaliDate(startDate);
+        const nepaliEndDate = this.toNepaliDate(endDate);
+        // Use internal formatter to get range parts
+        const rangeParts = this.internalFormatter.formatRangeToParts(startDate, endDate);
+        // Replace year, month, and day values with Nepali equivalents
+        return rangeParts.map((part)=>{
+            const newPart = {
+                ...part
+            };
+            if (part.type === 'year') {
+                const nepaliYear = part.source === 'startRange' ? nepaliStartDate.year : nepaliEndDate.year;
+                newPart.value = this.formatNepaliValue(nepaliYear);
+            } else if (part.type === 'month') {
+                const nepaliMonth = part.source === 'startRange' ? nepaliStartDate.month : nepaliEndDate.month;
+                newPart.value = this.formatNepaliMonth(nepaliMonth, part.value);
+            } else if (part.type === 'day') {
+                const nepaliDay = part.source === 'startRange' ? nepaliStartDate.day : nepaliEndDate.day;
+                newPart.value = this.formatNepaliValue(nepaliDay);
+            } else if (part.type === 'era') // Use appropriate era name based on locale
+            newPart.value = this.locale.startsWith('ne') ? "\u092C\u093F.\u0938\u0902." : 'BS'; // Bikram Sambat
+            return newPart;
+        });
+    }
+    /**
+   * Format a numeric value using Nepali/Devanagari digits if the locale requires it.
+   */ formatNepaliValue(value) {
+        // Check if we should use Devanagari digits based on locale and numberingSystem
+        const useDevanagariDigits = this.locale.startsWith('ne') || this.options.numberingSystem === 'deva';
+        if (useDevanagariDigits) return value.toString().replace(/\d/g, (digit)=>String.fromCharCode(0x0966 + Number.parseInt(digit, 10)) // 0x0966 is the Unicode code point for Devanagari digit 0
+        );
+        return value.toString();
+    }
+    /**
+   * Format a month value according to the format type used in original part.
+   */ formatNepaliMonth(month, originalFormat) {
+        // Define Nepali month names (for Nepali locale)
+        const nepaliMonths = {
+            long: [
+                "\u092C\u0948\u0936\u093E\u0916",
+                "\u091C\u0947\u0920",
+                "\u0905\u0938\u093E\u0930",
+                "\u0936\u094D\u0930\u093E\u0935\u0923",
+                "\u092D\u093E\u0926\u094D\u0930",
+                "\u0906\u0936\u094D\u0935\u093F\u0928",
+                "\u0915\u093E\u0930\u094D\u0924\u093F\u0915",
+                "\u092E\u0902\u0938\u093F\u0930",
+                "\u092A\u094C\u0937",
+                "\u092E\u093E\u0918",
+                "\u092B\u093E\u0932\u094D\u0917\u0941\u0928",
+                "\u091A\u0948\u0924\u094D\u0930"
+            ],
+            short: [
+                "\u092C\u0948\u0936\u093E\u0916",
+                "\u091C\u0947\u0920",
+                "\u0905\u0938\u093E\u0930",
+                "\u0936\u094D\u0930\u093E\u0935\u0923",
+                "\u092D\u093E\u0926\u094D\u0930",
+                "\u0906\u0936\u094D\u0935\u093F\u0928",
+                "\u0915\u093E\u0930\u094D\u0924\u093F\u0915",
+                "\u092E\u0902\u0938\u093F\u0930",
+                "\u092A\u094C\u0937",
+                "\u092E\u093E\u0918",
+                "\u092B\u093E\u0932\u094D\u0917\u0941\u0928",
+                "\u091A\u0948\u0924\u094D\u0930"
+            ],
+            narrow: [
+                "\u092C\u0948",
+                "\u091C\u0947",
+                "\u0905",
+                "\u0936\u094D\u0930\u093E",
+                "\u092D\u093E",
+                "\u0906",
+                "\u0915\u093E",
+                "\u092E\u0902",
+                "\u092A\u094C",
+                "\u092E\u093E",
+                "\u092B\u093E",
+                "\u091A\u0948"
+            ]
+        };
+        // Define transliterated month names (for non-Nepali locales)
+        const transliteratedMonths = {
+            long: [
+                'Baisakh',
+                'Jestha',
+                'Asadh',
+                'Shrawan',
+                'Bhadra',
+                'Ashwin',
+                'Kartik',
+                'Mangsir',
+                'Poush',
+                'Magh',
+                'Falgun',
+                'Chaitra'
+            ],
+            short: [
+                'Bai',
+                'Jes',
+                'Asa',
+                'Shr',
+                'Bha',
+                'Ash',
+                'Kar',
+                'Man',
+                'Pou',
+                'Mag',
+                'Fal',
+                'Cha'
+            ],
+            narrow: [
+                'B',
+                'J',
+                'A',
+                'S',
+                'B',
+                'A',
+                'K',
+                'M',
+                'P',
+                'M',
+                'F',
+                'C'
+            ]
+        };
+        // Choose the appropriate month names based on locale
+        const monthNames = this.locale.startsWith('ne') ? nepaliMonths : transliteratedMonths;
+        if (/^\d+$/.test(originalFormat)) {
+            let formattedMonth = this.formatNepaliValue(month);
+            if (originalFormat.length === 2) formattedMonth = formattedMonth.padStart(2, this.formatNepaliValue(0).charAt(0));
+            return formattedMonth;
+        }
+        // Determine the format type based on both month and dateStyle options
+        let formatType;
+        if (this.options.month) formatType = this.options.month;
+        else if (this.options.dateStyle) // Map dateStyle to appropriate month format
+        switch(this.options.dateStyle){
+            case 'full':
+            case 'long':
+                formatType = 'long';
+                break;
+            case 'medium':
+                formatType = 'short';
+                break;
+            case 'short':
+                formatType = 'numeric';
+                break;
+            default:
+                formatType = 'long';
+        }
+        else // Default to long format if no options specified
+        formatType = 'long';
+        // Format the month according to the determined format type
+        switch(formatType){
+            case 'numeric':
+                return this.formatNepaliValue(month);
+            case '2-digit':
+                return this.formatNepaliValue(month).padStart(2, this.formatNepaliValue(0).charAt(0));
+            case 'narrow':
+                return monthNames.narrow[month - 1];
+            case 'short':
+                return monthNames.short[month - 1];
+            case 'long':
+                return monthNames.long[month - 1];
+        }
+    }
+    formatNepaliEra() {
+        // Define Nepali era names
+        const nepaliEra = {
+            long: "\u092C\u093F\u0915\u094D\u0930\u092E \u0938\u092E\u094D\u092C\u0924",
+            short: "\u092C\u093F.\u0938\u0902.",
+            narrow: "\u092C\u093F.\u0938\u0902."
+        };
+        // Define transliterated era names
+        const transliteratedEra = {
+            long: 'Bikram Sambat',
+            short: 'BS',
+            narrow: 'BS'
+        };
+        // Choose the appropriate era names based on locale
+        const eraNames = this.locale.startsWith('ne') ? nepaliEra : transliteratedEra;
+        // Determine the format type based on era option
+        let formatType;
+        if (this.options.era) formatType = this.options.era;
+        else if (this.options.dateStyle) // Map dateStyle to appropriate era format
+        switch(this.options.dateStyle){
+            case 'full':
+            case 'long':
+                formatType = 'long';
+                break;
+            case 'medium':
+                formatType = 'short';
+                break;
+            case 'short':
+                formatType = 'narrow';
+                break;
+            default:
+                formatType = 'short';
+        }
+        else // Default to short format if no options specified
+        formatType = 'short';
+        return eraNames[formatType];
+    }
+    /**
+   * Get the resolved options used for formatting.
+   */ resolvedOptions() {
+        const resolved = this.internalFormatter.resolvedOptions();
+        // Override calendar and numberingSystem
+        resolved.calendar = 'nepali';
+        // Use Devanagari numbering system for Nepali locale
+        if (this.locale.startsWith('ne')) resolved.numberingSystem = 'deva';
+        return resolved;
+    }
+    /**
+   * Static method to check which locales are supported.
+   */ static supportedLocalesOf(locales, options) {
+        // For now, simply delegate to the internal formatter's supportedLocalesOf
+        return Intl.DateTimeFormat.supportedLocalesOf(locales, options);
+    }
+    constructor(locale, options = {}){
+        this.locale = locale;
+        this.options = {
+            ...options,
+            calendar: 'gregory'
+        }; // Use gregory for internal formatting
+        // Create a similar formatter without the nepali calendar for fallback formatting
+        this.internalFormatter = new Intl.DateTimeFormat(locale, this.options);
+        // Initialize the nepali calendar
+        this.calendar = new (0, $6d143e82714b55de$export$d3a3277d294231d)();
+    }
+}
+
+
+export {$ce362947f989ca88$export$26111daf82bf03cd as NepaliDateTimeFormat};
+//# sourceMappingURL=NepaliDateTimeFormat.module.js.map
diff --git a/dist/NepaliDateTimeFormat.module.js.map b/dist/NepaliDateTimeFormat.module.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..fae661d5fe9e4432dcfc2b94cc0e544b1763c67e
--- /dev/null
+++ b/dist/NepaliDateTimeFormat.module.js.map
@@ -0,0 +1 @@
+{"mappings":"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","sources":["packages/@internationalized/date/src/NepaliDateTimeFormat.ts"],"sourcesContent":["import {AnyCalendarDate} from './types';\nimport {gregorianToJulianDay} from './calendars/GregorianCalendar';\nimport {NepaliCalendar} from './calendars/NepaliCalendar';\n\nexport class NepaliDateTimeFormat implements Intl.DateTimeFormat {\n  private locale: string;\n  private options: Intl.DateTimeFormatOptions;\n  private calendar: NepaliCalendar;\n  private internalFormatter: Intl.DateTimeFormat;\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.locale = locale;\n    this.options = {...options, calendar: 'gregory'}; // Use gregory for internal formatting\n\n    // Create a similar formatter without the nepali calendar for fallback formatting\n    this.internalFormatter = new Intl.DateTimeFormat(locale, this.options);\n\n    // Initialize the nepali calendar\n    this.calendar = new NepaliCalendar();\n  }\n\n  /**\n   * Convert a JavaScript Date to a Nepali date object.\n   */\n  private toNepaliDate(date: Date): AnyCalendarDate {\n    const julianDay = gregorianToJulianDay(\n      'AD',\n      date.getFullYear(),\n      date.getMonth() + 1,\n      date.getDate()\n    );\n    return this.calendar.fromJulianDay(julianDay);\n  }\n\n  /**\n   * Format a date according to the locale and options.\n   */\n  format(date?: Date | number): string {\n    if (date === undefined) {\n      date = new Date();\n    } else if (typeof date === 'number') {\n      date = new Date(date);\n    }\n\n    // Get parts from internal formatter\n    const parts = this.formatToParts(date);\n\n    // Combine parts into a string\n    return parts.map(part => part.value).join('');\n  }\n\n  /**\n   * Format a date to parts according to the locale and options.\n   */\n  formatToParts(date?: Date | number): Intl.DateTimeFormatPart[] {\n    if (date === undefined) {\n      date = new Date();\n    } else if (typeof date === 'number') {\n      date = new Date(date);\n    }\n\n    const nepaliDate = this.toNepaliDate(date);\n\n    // Get parts from internal formatter first\n    const parts = this.internalFormatter.formatToParts(date);\n\n    // Replace year, month, and day values with Nepali equivalents\n    return parts.map(part => {\n      const newPart = {...part};\n\n      if (part.type === 'year') {\n        newPart.value = this.formatNepaliValue(nepaliDate.year);\n      } else if (part.type === 'month') {\n        newPart.value = this.formatNepaliMonth(nepaliDate.month, part.value);\n      } else if (part.type === 'day') {\n        newPart.value = this.formatNepaliValue(nepaliDate.day);\n      } else if (part.type === 'weekday') {\n        // Keep original weekday as days of week align between calendars\n      } else if (part.type === 'era') {\n        newPart.value = this.formatNepaliEra();\n      }\n\n\n      return newPart;\n    });\n  }\n\n  /**\n   * Format a date range according to the locale and options.\n   */\n  formatRange(startDate: Date | number, endDate: Date | number): string {\n    // Convert to Date objects if numbers\n    if (typeof startDate === 'number') {\n      startDate = new Date(startDate);\n    }\n    if (typeof endDate === 'number') {\n      endDate = new Date(endDate);\n    }\n\n    // Get parts from formatRangeToParts\n    const parts = this.formatRangeToParts(startDate, endDate);\n\n    // Combine parts into a string\n    return parts.map(part => part.value).join('');\n  }\n\n  /**\n   * Format a date range to parts according to the locale and options.\n   */\n  formatRangeToParts(startDate: Date | number, endDate: Date | number): Intl.DateTimeRangeFormatPart[] {\n    // Convert to Date objects if numbers\n    if (typeof startDate === 'number') {\n      startDate = new Date(startDate);\n    }\n    if (typeof endDate === 'number') {\n      endDate = new Date(endDate);\n    }\n\n    // Get Nepali dates\n    const nepaliStartDate = this.toNepaliDate(startDate);\n    const nepaliEndDate = this.toNepaliDate(endDate);\n\n    // Use internal formatter to get range parts\n    const rangeParts = this.internalFormatter.formatRangeToParts(startDate, endDate);\n\n    // Replace year, month, and day values with Nepali equivalents\n    return rangeParts.map(part => {\n      const newPart = {...part};\n\n      if (part.type === 'year') {\n        const nepaliYear = part.source === 'startRange' ? nepaliStartDate.year : nepaliEndDate.year;\n        newPart.value = this.formatNepaliValue(nepaliYear);\n      } else if (part.type === 'month') {\n        const nepaliMonth = part.source === 'startRange' ? nepaliStartDate.month : nepaliEndDate.month;\n        newPart.value = this.formatNepaliMonth(nepaliMonth, part.value);\n      } else if (part.type === 'day') {\n        const nepaliDay = part.source === 'startRange' ? nepaliStartDate.day : nepaliEndDate.day;\n        newPart.value = this.formatNepaliValue(nepaliDay);\n      } else if (part.type === 'era') {\n        // Use appropriate era name based on locale\n        newPart.value = this.locale.startsWith('ne') ? 'बि.सं.' : 'BS'; // Bikram Sambat\n      }\n\n      return newPart;\n    });\n  }\n\n  /**\n   * Format a numeric value using Nepali/Devanagari digits if the locale requires it.\n   */\n  private formatNepaliValue(value: number): string {\n    // Check if we should use Devanagari digits based on locale and numberingSystem\n    const useDevanagariDigits = this.locale.startsWith('ne') ||\n                                this.options.numberingSystem === 'deva';\n\n    if (useDevanagariDigits) {\n      return value.toString().replace(/\\d/g, digit =>\n        String.fromCharCode(0x0966 + Number.parseInt(digit, 10)) // 0x0966 is the Unicode code point for Devanagari digit 0\n      );\n    }\n\n    return value.toString();\n  }\n\n  /**\n   * Format a month value according to the format type used in original part.\n   */\n  private formatNepaliMonth(month: number, originalFormat: string): string {\n    // Define Nepali month names (for Nepali locale)\n    const nepaliMonths = {\n      long: [\n        'बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन',\n        'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'\n      ],\n      short: [\n        'बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन',\n        'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'\n      ],\n      narrow: [\n        'बै', 'जे', 'अ', 'श्रा', 'भा', 'आ',\n        'का', 'मं', 'पौ', 'मा', 'फा', 'चै'\n      ]\n    };\n\n    // Define transliterated month names (for non-Nepali locales)\n    const transliteratedMonths = {\n      long: [\n        'Baisakh', 'Jestha', 'Asadh', 'Shrawan', 'Bhadra', 'Ashwin',\n        'Kartik', 'Mangsir', 'Poush', 'Magh', 'Falgun', 'Chaitra'\n      ],\n      short: [\n        'Bai', 'Jes', 'Asa', 'Shr', 'Bha', 'Ash',\n        'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'\n      ],\n      narrow: [\n        'B', 'J', 'A', 'S', 'B', 'A',\n        'K', 'M', 'P', 'M', 'F', 'C'\n      ]\n    };\n\n    // Choose the appropriate month names based on locale\n    const monthNames = this.locale.startsWith('ne') ? nepaliMonths : transliteratedMonths;\n\n    if (/^\\d+$/.test(originalFormat)) {\n      let formattedMonth = this.formatNepaliValue(month);\n      if (originalFormat.length === 2) {\n        formattedMonth = formattedMonth.padStart(2, this.formatNepaliValue(0).charAt(0));\n      }\n      return formattedMonth;\n    }\n\n    // Determine the format type based on both month and dateStyle options\n    let formatType: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';\n\n    if (this.options.month) {\n      formatType = this.options.month;\n    } else if (this.options.dateStyle) {\n      // Map dateStyle to appropriate month format\n      switch (this.options.dateStyle) {\n        case 'full':\n        case 'long':\n          formatType = 'long';\n          break;\n        case 'medium':\n          formatType = 'short';\n          break;\n        case 'short':\n          formatType = 'numeric';\n          break;\n        default:\n          formatType = 'long';\n      }\n    } else {\n      // Default to long format if no options specified\n      formatType = 'long';\n    }\n\n    // Format the month according to the determined format type\n    switch (formatType) {\n      case 'numeric':\n        return this.formatNepaliValue(month);\n      case '2-digit':\n        return this.formatNepaliValue(month).padStart(2, this.formatNepaliValue(0).charAt(0));\n      case 'narrow':\n        return monthNames.narrow[month - 1];\n      case 'short':\n        return monthNames.short[month - 1];\n      case 'long':\n        return monthNames.long[month - 1];\n    }\n  }\n\n  private formatNepaliEra(): string {\n    // Define Nepali era names\n    const nepaliEra = {\n      long: 'बिक्रम सम्बत',\n      short: 'बि.सं.',\n      narrow: 'बि.सं.'\n    };\n\n    // Define transliterated era names\n    const transliteratedEra = {\n      long: 'Bikram Sambat',\n      short: 'BS',\n      narrow: 'BS'\n    };\n\n    // Choose the appropriate era names based on locale\n    const eraNames = this.locale.startsWith('ne') ? nepaliEra : transliteratedEra;\n\n    // Determine the format type based on era option\n    let formatType: 'long' | 'short' | 'narrow';\n\n    if (this.options.era) {\n      formatType = this.options.era;\n    } else if (this.options.dateStyle) {\n      // Map dateStyle to appropriate era format\n      switch (this.options.dateStyle) {\n        case 'full':\n        case 'long':\n          formatType = 'long';\n          break;\n        case 'medium':\n          formatType = 'short';\n          break;\n        case 'short':\n          formatType = 'narrow';\n          break;\n        default:\n          formatType = 'short';\n      }\n    } else {\n      // Default to short format if no options specified\n      formatType = 'short';\n    }\n\n    return eraNames[formatType];\n  }\n\n  /**\n   * Get the resolved options used for formatting.\n   */\n  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {\n    const resolved = this.internalFormatter.resolvedOptions();\n\n    // Override calendar and numberingSystem\n    resolved.calendar = 'nepali';\n\n    // Use Devanagari numbering system for Nepali locale\n    if (this.locale.startsWith('ne')) {\n      resolved.numberingSystem = 'deva';\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Static method to check which locales are supported.\n   */\n  static supportedLocalesOf(\n    locales: string | string[],\n    options?: Intl.DateTimeFormatOptions\n  ): string[] {\n    // For now, simply delegate to the internal formatter's supportedLocalesOf\n    return Intl.DateTimeFormat.supportedLocalesOf(locales, options);\n  }\n}\n"],"names":[],"version":3,"file":"NepaliDateTimeFormat.module.js.map"}
\ No newline at end of file
diff --git a/dist/createCalendar.main.js b/dist/createCalendar.main.js
index 1cb83aa601f7d80b2f77c8b557b2e1b95f06c943..c6018b67f76575cdf0d7a871c5a04eebfbd59f3a 100644
--- a/dist/createCalendar.main.js
+++ b/dist/createCalendar.main.js
@@ -5,6 +5,7 @@ var $0f5324ee3bdd9396$exports = require("./HebrewCalendar.main.js");
 var $5f1dfa5c67609fe6$exports = require("./IndianCalendar.main.js");
 var $ecb2c4cc8c9aae25$exports = require("./IslamicCalendar.main.js");
 var $b0ac0602ef646b2c$exports = require("./JapaneseCalendar.main.js");
+var $fe18f90f992fac43$exports = require("./NepaliCalendar.main.js");
 var $3c060181fc7249ae$exports = require("./PersianCalendar.main.js");
 var $9cc5d3577ec40243$exports = require("./TaiwanCalendar.main.js");
 
@@ -33,6 +34,7 @@ $parcel$export(module.exports, "createCalendar", () => $4922c0a5a69da0ba$export$
 
 
 
+
 function $4922c0a5a69da0ba$export$dd0bbc9b26defe37(name) {
     switch(name){
         case 'buddhist':
@@ -59,6 +61,8 @@ function $4922c0a5a69da0ba$export$dd0bbc9b26defe37(name) {
             return new (0, $3c060181fc7249ae$exports.PersianCalendar)();
         case 'roc':
             return new (0, $9cc5d3577ec40243$exports.TaiwanCalendar)();
+        case 'nepali':
+            return new (0, $fe18f90f992fac43$exports.NepaliCalendar)();
         case 'gregory':
         default:
             return new (0, $af14c9812fdceb33$exports.GregorianCalendar)();
diff --git a/dist/createCalendar.main.js.map b/dist/createCalendar.main.js.map
index 575c08ffb65336623934c6ee294d03fde88fdf25..598dc18e582f6dca76485109a206e0f5ef2b47ba 100644
--- a/dist/createCalendar.main.js.map
+++ b/dist/createCalendar.main.js.map
@@ -1 +1 @@
-{"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;AAcM,SAAS,0CAAe,IAAwB;IACrD,OAAQ;QACN,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,0CAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,0CAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,mDAAwB;QACrC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,8CAAmB;QAChC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,gDAAqB;QAClC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,iDAAsB;QACnC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,0CAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAc;QAC3B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;QACL;YACE,OAAO,IAAI,CAAA,GAAA,2CAAgB;IAC/B;AACF","sources":["packages/@internationalized/date/src/createCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar, CalendarIdentifier} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: CalendarIdentifier): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n"],"names":[],"version":3,"file":"createCalendar.main.js.map"}
\ No newline at end of file
+{"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;;AAcM,SAAS,0CAAe,IAAwB;IACrD,OAAQ;QACN,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,0CAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,0CAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,mDAAwB;QACrC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,8CAAmB;QAChC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,gDAAqB;QAClC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,iDAAsB;QACnC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,0CAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAc;QAC3B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;QACL;YACE,OAAO,IAAI,CAAA,GAAA,2CAAgB;IAC/B;AACF","sources":["packages/@internationalized/date/src/createCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar, CalendarIdentifier} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {NepaliCalendar} from './calendars/NepaliCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: CalendarIdentifier): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'nepali':\n      return new NepaliCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n"],"names":[],"version":3,"file":"createCalendar.main.js.map"}
\ No newline at end of file
diff --git a/dist/createCalendar.mjs b/dist/createCalendar.mjs
index 456d2c935413fb9fdd1bec47955121d39e47f855..12571b29b7898c38072d0a7ee8367f477dff76d5 100644
--- a/dist/createCalendar.mjs
+++ b/dist/createCalendar.mjs
@@ -5,6 +5,7 @@ import {HebrewCalendar as $7c5f6fbf42389787$export$ca405048b8fb5af} from "./Hebr
 import {IndianCalendar as $82c358003bdda0a8$export$39f31c639fa15726} from "./IndianCalendar.mjs";
 import {IslamicCivilCalendar as $f2f3e0e3a817edbd$export$2066795aadd37bfc, IslamicTabularCalendar as $f2f3e0e3a817edbd$export$37f0887f2f9d22f7, IslamicUmalquraCalendar as $f2f3e0e3a817edbd$export$5baab4758c231076} from "./IslamicCalendar.mjs";
 import {JapaneseCalendar as $62225008020f0a13$export$b746ab2b60cdffbf} from "./JapaneseCalendar.mjs";
+import {NepaliCalendar as $6d143e82714b55de$export$d3a3277d294231d} from "./NepaliCalendar.mjs";
 import {PersianCalendar as $f3ed2e4472ae7e25$export$37fccdbfd14c5939} from "./PersianCalendar.mjs";
 import {TaiwanCalendar as $5f31bd6f0c8940b2$export$65e01080afcb0799} from "./TaiwanCalendar.mjs";
 
@@ -27,6 +28,7 @@ import {TaiwanCalendar as $5f31bd6f0c8940b2$export$65e01080afcb0799} from "./Tai
 
 
 
+
 function $64244302c3013299$export$dd0bbc9b26defe37(name) {
     switch(name){
         case 'buddhist':
@@ -53,6 +55,8 @@ function $64244302c3013299$export$dd0bbc9b26defe37(name) {
             return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();
         case 'roc':
             return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();
+        case 'nepali':
+            return new (0, $6d143e82714b55de$export$d3a3277d294231d)();
         case 'gregory':
         default:
             return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();
diff --git a/dist/createCalendar.module.js b/dist/createCalendar.module.js
index abfc27b12591aa95c2a11006619faa95d6392fb4..a038b2079f79d7ef5d077ec578644c399021d329 100644
--- a/dist/createCalendar.module.js
+++ b/dist/createCalendar.module.js
@@ -5,6 +5,7 @@ import {HebrewCalendar as $7c5f6fbf42389787$export$ca405048b8fb5af} from "./Hebr
 import {IndianCalendar as $82c358003bdda0a8$export$39f31c639fa15726} from "./IndianCalendar.module.js";
 import {IslamicCivilCalendar as $f2f3e0e3a817edbd$export$2066795aadd37bfc, IslamicTabularCalendar as $f2f3e0e3a817edbd$export$37f0887f2f9d22f7, IslamicUmalquraCalendar as $f2f3e0e3a817edbd$export$5baab4758c231076} from "./IslamicCalendar.module.js";
 import {JapaneseCalendar as $62225008020f0a13$export$b746ab2b60cdffbf} from "./JapaneseCalendar.module.js";
+import {NepaliCalendar as $6d143e82714b55de$export$d3a3277d294231d} from "./NepaliCalendar.module.js";
 import {PersianCalendar as $f3ed2e4472ae7e25$export$37fccdbfd14c5939} from "./PersianCalendar.module.js";
 import {TaiwanCalendar as $5f31bd6f0c8940b2$export$65e01080afcb0799} from "./TaiwanCalendar.module.js";
 
@@ -27,6 +28,7 @@ import {TaiwanCalendar as $5f31bd6f0c8940b2$export$65e01080afcb0799} from "./Tai
 
 
 
+
 function $64244302c3013299$export$dd0bbc9b26defe37(name) {
     switch(name){
         case 'buddhist':
@@ -53,6 +55,8 @@ function $64244302c3013299$export$dd0bbc9b26defe37(name) {
             return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();
         case 'roc':
             return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();
+        case 'nepali':
+            return new (0, $6d143e82714b55de$export$d3a3277d294231d)();
         case 'gregory':
         default:
             return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();
diff --git a/dist/createCalendar.module.js.map b/dist/createCalendar.module.js.map
index 13933d68c9ad82ade2601abcfaa0bc0afa4b9fc8..10c767816da417ab925545333d420663443205e0 100644
--- a/dist/createCalendar.module.js.map
+++ b/dist/createCalendar.module.js.map
@@ -1 +1 @@
-{"mappings":";;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;AAcM,SAAS,0CAAe,IAAwB;IACrD,OAAQ;QACN,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAwB;QACrC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAmB;QAChC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAqB;QAClC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAsB;QACnC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAc;QAC3B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAa;QAC1B,KAAK;QACL;YACE,OAAO,IAAI,CAAA,GAAA,yCAAgB;IAC/B;AACF","sources":["packages/@internationalized/date/src/createCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar, CalendarIdentifier} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: CalendarIdentifier): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n"],"names":[],"version":3,"file":"createCalendar.module.js.map"}
\ No newline at end of file
+{"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;;AAcM,SAAS,0CAAe,IAAwB;IACrD,OAAQ;QACN,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAwB;QACrC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAmB;QAChC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAqB;QAClC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAsB;QACnC,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAe;QAC5B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAc;QAC3B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,yCAAa;QAC1B,KAAK;YACH,OAAO,IAAI,CAAA,GAAA,wCAAa;QAC1B,KAAK;QACL;YACE,OAAO,IAAI,CAAA,GAAA,yCAAgB;IAC/B;AACF","sources":["packages/@internationalized/date/src/createCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar, CalendarIdentifier} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {NepaliCalendar} from './calendars/NepaliCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: CalendarIdentifier): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'nepali':\n      return new NepaliCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n"],"names":[],"version":3,"file":"createCalendar.module.js.map"}
\ No newline at end of file
diff --git a/dist/import.mjs b/dist/import.mjs
index 52f5ce099d6196bc61515ae4fada3b64e2515acf..8a26ce0af01fc59b8772ebb8a7b9a6a25446c923 100644
--- a/dist/import.mjs
+++ b/dist/import.mjs
@@ -8,11 +8,13 @@ import {IndianCalendar as $82c358003bdda0a8$export$39f31c639fa15726} from "./Ind
 import {IslamicCivilCalendar as $f2f3e0e3a817edbd$export$2066795aadd37bfc, IslamicTabularCalendar as $f2f3e0e3a817edbd$export$37f0887f2f9d22f7, IslamicUmalquraCalendar as $f2f3e0e3a817edbd$export$5baab4758c231076} from "./IslamicCalendar.mjs";
 import {HebrewCalendar as $7c5f6fbf42389787$export$ca405048b8fb5af} from "./HebrewCalendar.mjs";
 import {CopticCalendar as $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1, EthiopicAmeteAlemCalendar as $b956b2d7a6cf451f$export$d72e0c37005a4914, EthiopicCalendar as $b956b2d7a6cf451f$export$26ba6eab5e20cd7d} from "./EthiopicCalendar.mjs";
+import {NepaliCalendar as $6d143e82714b55de$export$d3a3277d294231d} from "./NepaliCalendar.mjs";
 import {createCalendar as $64244302c3013299$export$dd0bbc9b26defe37} from "./createCalendar.mjs";
 import {fromAbsolute as $11d87f3f76e88657$export$1b96692a1ba042ac, fromDate as $11d87f3f76e88657$export$e57ff100d91bd4b9, toCalendar as $11d87f3f76e88657$export$b4a036af3fc0b032, toCalendarDate as $11d87f3f76e88657$export$93522d1a439f3617, toCalendarDateTime as $11d87f3f76e88657$export$b21e0b124e224484, toLocalTimeZone as $11d87f3f76e88657$export$d9b67bc93c097491, toTime as $11d87f3f76e88657$export$d33f79e3ffc3dc83, toTimeZone as $11d87f3f76e88657$export$538b00033cc11c75, toZoned as $11d87f3f76e88657$export$84c95a83c799e074} from "./conversion.mjs";
 import {endOfMonth as $14e0f24ef4ac5c92$export$a2258d9c4118825c, endOfWeek as $14e0f24ef4ac5c92$export$ef8b6d9133084f4e, endOfYear as $14e0f24ef4ac5c92$export$8b7aa55c66d5569e, getDayOfWeek as $14e0f24ef4ac5c92$export$2061056d06d7cdf7, getHoursInDay as $14e0f24ef4ac5c92$export$126c91c941de7e, getLocalTimeZone as $14e0f24ef4ac5c92$export$aa8b41735afcabd2, getMinimumDayInMonth as $14e0f24ef4ac5c92$export$b2f4953d301981d5, getMinimumMonthInYear as $14e0f24ef4ac5c92$export$5412ac11713b72ad, getWeeksInMonth as $14e0f24ef4ac5c92$export$ccc1b2479e7dd654, isEqualCalendar as $14e0f24ef4ac5c92$export$dbc69fd56b53d5e, isEqualDay as $14e0f24ef4ac5c92$export$91b62ebf2ba703ee, isEqualMonth as $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2, isEqualYear as $14e0f24ef4ac5c92$export$ea840f5a6dda8147, isSameDay as $14e0f24ef4ac5c92$export$ea39ec197993aef0, isSameMonth as $14e0f24ef4ac5c92$export$a18c89cbd24170ff, isSameYear as $14e0f24ef4ac5c92$export$5841f9eb9773f25f, isToday as $14e0f24ef4ac5c92$export$629b0a497aa65267, isWeekday as $14e0f24ef4ac5c92$export$ee9d87258e1d19ed, isWeekend as $14e0f24ef4ac5c92$export$618d60ea299da42, maxDate as $14e0f24ef4ac5c92$export$a75f2bff57811055, minDate as $14e0f24ef4ac5c92$export$5c333a116e949cdd, now as $14e0f24ef4ac5c92$export$461939dd4422153, startOfMonth as $14e0f24ef4ac5c92$export$a5a3b454ada2268e, startOfWeek as $14e0f24ef4ac5c92$export$42c81a444fbfb5d4, startOfYear as $14e0f24ef4ac5c92$export$f91e89d3d0406102, today as $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3} from "./queries.mjs";
 import {parseAbsolute as $fae977aafc393c5c$export$5adfdab05168c219, parseAbsoluteToLocal as $fae977aafc393c5c$export$8e384432362ed0f0, parseDate as $fae977aafc393c5c$export$6b862160d295c8e, parseDateTime as $fae977aafc393c5c$export$588937bcd60ade55, parseDuration as $fae977aafc393c5c$export$ecae829bb3747ea6, parseTime as $fae977aafc393c5c$export$c9698ec7f05a07e1, parseZonedDateTime as $fae977aafc393c5c$export$fd7893f06e92a6a4} from "./string.mjs";
 import {DateFormatter as $fb18d541ea1ad717$export$ad991b66133851cf} from "./DateFormatter.mjs";
+import {NepaliDateTimeFormat as $ce362947f989ca88$export$26111daf82bf03cd} from "./NepaliDateTimeFormat.mjs";
 
 /*
  * Copyright 2020 Adobe. All rights reserved.
@@ -41,5 +43,7 @@ import {DateFormatter as $fb18d541ea1ad717$export$ad991b66133851cf} from "./Date
 
 
 
-export {$35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $14e0f24ef4ac5c92$export$dbc69fd56b53d5e as isEqualCalendar, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter};
+
+
+export {$35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $6d143e82714b55de$export$d3a3277d294231d as NepaliCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $14e0f24ef4ac5c92$export$dbc69fd56b53d5e as isEqualCalendar, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter, $ce362947f989ca88$export$26111daf82bf03cd as NepaliDateTimeFormat};
 //# sourceMappingURL=module.js.map
diff --git a/dist/main.js b/dist/main.js
index d5f1df54c7ac10a1be6cce8ae7fbbf72d504010a..2db8a2128bfc1d94b4baf4641e91c751f56f260d 100644
--- a/dist/main.js
+++ b/dist/main.js
@@ -8,11 +8,13 @@ var $5f1dfa5c67609fe6$exports = require("./IndianCalendar.main.js");
 var $ecb2c4cc8c9aae25$exports = require("./IslamicCalendar.main.js");
 var $0f5324ee3bdd9396$exports = require("./HebrewCalendar.main.js");
 var $4db04d1051af0f2f$exports = require("./EthiopicCalendar.main.js");
+var $fe18f90f992fac43$exports = require("./NepaliCalendar.main.js");
 var $4922c0a5a69da0ba$exports = require("./createCalendar.main.js");
 var $4ae0260a69729f1d$exports = require("./conversion.main.js");
 var $1f0f7ebf1ae6c530$exports = require("./queries.main.js");
 var $4c32e2d98e5a5134$exports = require("./string.main.js");
 var $8f23a04ae90a588b$exports = require("./DateFormatter.main.js");
+var $04527da2aa5c2c8d$exports = require("./NepaliDateTimeFormat.main.js");
 
 
 function $parcel$export(e, n, v, s) {
@@ -36,6 +38,7 @@ $parcel$export(module.exports, "HebrewCalendar", () => $0f5324ee3bdd9396$exports
 $parcel$export(module.exports, "EthiopicCalendar", () => $4db04d1051af0f2f$exports.EthiopicCalendar);
 $parcel$export(module.exports, "EthiopicAmeteAlemCalendar", () => $4db04d1051af0f2f$exports.EthiopicAmeteAlemCalendar);
 $parcel$export(module.exports, "CopticCalendar", () => $4db04d1051af0f2f$exports.CopticCalendar);
+$parcel$export(module.exports, "NepaliCalendar", () => $fe18f90f992fac43$exports.NepaliCalendar);
 $parcel$export(module.exports, "createCalendar", () => $4922c0a5a69da0ba$exports.createCalendar);
 $parcel$export(module.exports, "toCalendarDate", () => $4ae0260a69729f1d$exports.toCalendarDate);
 $parcel$export(module.exports, "toCalendarDateTime", () => $4ae0260a69729f1d$exports.toCalendarDateTime);
@@ -80,6 +83,7 @@ $parcel$export(module.exports, "parseAbsoluteToLocal", () => $4c32e2d98e5a5134$e
 $parcel$export(module.exports, "parseZonedDateTime", () => $4c32e2d98e5a5134$exports.parseZonedDateTime);
 $parcel$export(module.exports, "parseDuration", () => $4c32e2d98e5a5134$exports.parseDuration);
 $parcel$export(module.exports, "DateFormatter", () => $8f23a04ae90a588b$exports.DateFormatter);
+$parcel$export(module.exports, "NepaliDateTimeFormat", () => $04527da2aa5c2c8d$exports.NepaliDateTimeFormat);
 /*
  * Copyright 2020 Adobe. All rights reserved.
  * This file is licensed to you under the Apache License, Version 2.0 (the "License");
@@ -107,4 +111,6 @@ $parcel$export(module.exports, "DateFormatter", () => $8f23a04ae90a588b$exports.
 
 
 
+
+
 //# sourceMappingURL=main.js.map
diff --git a/dist/main.js.map b/dist/main.js.map
index db2aeb2c043b331df3d52eef453d83d2b6f467c0..5d055e286f707c8e627ef4423724770311e0b6e1 100644
--- a/dist/main.js.map
+++ b/dist/main.js.map
@@ -1 +1 @@
-{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC","sources":["packages/@internationalized/date/src/index.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  CalendarIdentifier,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday,\n  isEqualCalendar\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n"],"names":[],"version":3,"file":"main.js.map"}
\ No newline at end of file
+{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC","sources":["packages/@internationalized/date/src/index.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  CalendarIdentifier,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {NepaliCalendar} from './calendars/NepaliCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday,\n  isEqualCalendar\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\nexport {NepaliDateTimeFormat} from './NepaliDateTimeFormat';\n"],"names":[],"version":3,"file":"main.js.map"}
\ No newline at end of file
diff --git a/dist/module.js b/dist/module.js
index 3cecc0bcc4e999a889b42c592ca05f7346e57752..307ea04301ebab8f5a30599561e6905d060bff7c 100644
--- a/dist/module.js
+++ b/dist/module.js
@@ -8,11 +8,13 @@ import {IndianCalendar as $82c358003bdda0a8$export$39f31c639fa15726} from "./Ind
 import {IslamicCivilCalendar as $f2f3e0e3a817edbd$export$2066795aadd37bfc, IslamicTabularCalendar as $f2f3e0e3a817edbd$export$37f0887f2f9d22f7, IslamicUmalquraCalendar as $f2f3e0e3a817edbd$export$5baab4758c231076} from "./IslamicCalendar.module.js";
 import {HebrewCalendar as $7c5f6fbf42389787$export$ca405048b8fb5af} from "./HebrewCalendar.module.js";
 import {CopticCalendar as $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1, EthiopicAmeteAlemCalendar as $b956b2d7a6cf451f$export$d72e0c37005a4914, EthiopicCalendar as $b956b2d7a6cf451f$export$26ba6eab5e20cd7d} from "./EthiopicCalendar.module.js";
+import {NepaliCalendar as $6d143e82714b55de$export$d3a3277d294231d} from "./NepaliCalendar.module.js";
 import {createCalendar as $64244302c3013299$export$dd0bbc9b26defe37} from "./createCalendar.module.js";
 import {fromAbsolute as $11d87f3f76e88657$export$1b96692a1ba042ac, fromDate as $11d87f3f76e88657$export$e57ff100d91bd4b9, toCalendar as $11d87f3f76e88657$export$b4a036af3fc0b032, toCalendarDate as $11d87f3f76e88657$export$93522d1a439f3617, toCalendarDateTime as $11d87f3f76e88657$export$b21e0b124e224484, toLocalTimeZone as $11d87f3f76e88657$export$d9b67bc93c097491, toTime as $11d87f3f76e88657$export$d33f79e3ffc3dc83, toTimeZone as $11d87f3f76e88657$export$538b00033cc11c75, toZoned as $11d87f3f76e88657$export$84c95a83c799e074} from "./conversion.module.js";
 import {endOfMonth as $14e0f24ef4ac5c92$export$a2258d9c4118825c, endOfWeek as $14e0f24ef4ac5c92$export$ef8b6d9133084f4e, endOfYear as $14e0f24ef4ac5c92$export$8b7aa55c66d5569e, getDayOfWeek as $14e0f24ef4ac5c92$export$2061056d06d7cdf7, getHoursInDay as $14e0f24ef4ac5c92$export$126c91c941de7e, getLocalTimeZone as $14e0f24ef4ac5c92$export$aa8b41735afcabd2, getMinimumDayInMonth as $14e0f24ef4ac5c92$export$b2f4953d301981d5, getMinimumMonthInYear as $14e0f24ef4ac5c92$export$5412ac11713b72ad, getWeeksInMonth as $14e0f24ef4ac5c92$export$ccc1b2479e7dd654, isEqualCalendar as $14e0f24ef4ac5c92$export$dbc69fd56b53d5e, isEqualDay as $14e0f24ef4ac5c92$export$91b62ebf2ba703ee, isEqualMonth as $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2, isEqualYear as $14e0f24ef4ac5c92$export$ea840f5a6dda8147, isSameDay as $14e0f24ef4ac5c92$export$ea39ec197993aef0, isSameMonth as $14e0f24ef4ac5c92$export$a18c89cbd24170ff, isSameYear as $14e0f24ef4ac5c92$export$5841f9eb9773f25f, isToday as $14e0f24ef4ac5c92$export$629b0a497aa65267, isWeekday as $14e0f24ef4ac5c92$export$ee9d87258e1d19ed, isWeekend as $14e0f24ef4ac5c92$export$618d60ea299da42, maxDate as $14e0f24ef4ac5c92$export$a75f2bff57811055, minDate as $14e0f24ef4ac5c92$export$5c333a116e949cdd, now as $14e0f24ef4ac5c92$export$461939dd4422153, startOfMonth as $14e0f24ef4ac5c92$export$a5a3b454ada2268e, startOfWeek as $14e0f24ef4ac5c92$export$42c81a444fbfb5d4, startOfYear as $14e0f24ef4ac5c92$export$f91e89d3d0406102, today as $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3} from "./queries.module.js";
 import {parseAbsolute as $fae977aafc393c5c$export$5adfdab05168c219, parseAbsoluteToLocal as $fae977aafc393c5c$export$8e384432362ed0f0, parseDate as $fae977aafc393c5c$export$6b862160d295c8e, parseDateTime as $fae977aafc393c5c$export$588937bcd60ade55, parseDuration as $fae977aafc393c5c$export$ecae829bb3747ea6, parseTime as $fae977aafc393c5c$export$c9698ec7f05a07e1, parseZonedDateTime as $fae977aafc393c5c$export$fd7893f06e92a6a4} from "./string.module.js";
 import {DateFormatter as $fb18d541ea1ad717$export$ad991b66133851cf} from "./DateFormatter.module.js";
+import {NepaliDateTimeFormat as $ce362947f989ca88$export$26111daf82bf03cd} from "./NepaliDateTimeFormat.module.js";
 
 /*
  * Copyright 2020 Adobe. All rights reserved.
@@ -41,5 +43,7 @@ import {DateFormatter as $fb18d541ea1ad717$export$ad991b66133851cf} from "./Date
 
 
 
-export {$35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $14e0f24ef4ac5c92$export$dbc69fd56b53d5e as isEqualCalendar, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter};
+
+
+export {$35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $6d143e82714b55de$export$d3a3277d294231d as NepaliCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $14e0f24ef4ac5c92$export$dbc69fd56b53d5e as isEqualCalendar, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter, $ce362947f989ca88$export$26111daf82bf03cd as NepaliDateTimeFormat};
 //# sourceMappingURL=module.js.map
diff --git a/dist/module.js.map b/dist/module.js.map
index 3e3541e59b19174841a4d5a84d1a109583d2528a..124fcffe27c5bbf8f14d8e8f0a3d95fc4f208141 100644
--- a/dist/module.js.map
+++ b/dist/module.js.map
@@ -1 +1 @@
-{"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC","sources":["packages/@internationalized/date/src/index.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  CalendarIdentifier,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday,\n  isEqualCalendar\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n"],"names":[],"version":3,"file":"module.js.map"}
\ No newline at end of file
+{"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC","sources":["packages/@internationalized/date/src/index.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  CalendarIdentifier,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {NepaliCalendar} from './calendars/NepaliCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday,\n  isEqualCalendar\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\nexport {NepaliDateTimeFormat} from './NepaliDateTimeFormat';\n"],"names":[],"version":3,"file":"module.js.map"}
\ No newline at end of file
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 43dd36c3244a62def5b97207b128cd182a667d77..a5ec26e537c3982fc27468acfa9632082481d016 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -346,7 +346,7 @@ export interface AnyTime {
 /** An interface that is compatible with any object with both date and time fields. */
 export interface AnyDateTime extends AnyCalendarDate, AnyTime {
 }
-export type CalendarIdentifier = 'gregory' | 'buddhist' | 'chinese' | 'coptic' | 'dangi' | 'ethioaa' | 'ethiopic' | 'hebrew' | 'indian' | 'islamic' | 'islamic-umalqura' | 'islamic-tbla' | 'islamic-civil' | 'islamic-rgsa' | 'iso8601' | 'japanese' | 'persian' | 'roc';
+export type CalendarIdentifier = 'gregory' | 'buddhist' | 'chinese' | 'coptic' | 'dangi' | 'ethioaa' | 'ethiopic' | 'hebrew' | 'indian' | 'islamic' | 'islamic-umalqura' | 'islamic-tbla' | 'islamic-civil' | 'islamic-rgsa' | 'iso8601' | 'japanese' | 'persian' | 'roc' | 'nepali';
 /**
  * The Calendar interface represents a calendar system, including information
  * about how days, months, years, and eras are organized, and methods to perform
@@ -627,8 +627,49 @@ export class CopticCalendar extends EthiopicCalendar {
     getEras(): string[];
     getYearsInEra(date: AnyCalendarDate): number;
 }
+/**
+ * The Vikram Samvat Calendar is a historical Hindu calendar used in the Indian subcontinent and Nepal.
+ * Years are counted from 57 BCE. The calendar is primarily used in Nepal and among Hindus
+ * in North India. Only one era identifier is supported: 'vikram'.
+ */
+export class NepaliCalendar extends GregorianCalendar {
+    identifier: CalendarIdentifier;
+    fromJulianDay(jd: number): CalendarDate;
+    toJulianDay(date: AnyCalendarDate): number;
+    getDaysInMonth(date: AnyCalendarDate): number;
+    getYearsInEra(): number;
+    getEras(): string[];
+    balanceDate(): void;
+}
 /** Creates a `Calendar` instance from a Unicode calendar identifier string. */
 export function createCalendar(name: CalendarIdentifier): Calendar;
+export class NepaliDateTimeFormat implements Intl.DateTimeFormat {
+    constructor(locale: string, options?: Intl.DateTimeFormatOptions);
+    /**
+     * Format a date according to the locale and options.
+     */
+    format(date?: Date | number): string;
+    /**
+     * Format a date to parts according to the locale and options.
+     */
+    formatToParts(date?: Date | number): Intl.DateTimeFormatPart[];
+    /**
+     * Format a date range according to the locale and options.
+     */
+    formatRange(startDate: Date | number, endDate: Date | number): string;
+    /**
+     * Format a date range to parts according to the locale and options.
+     */
+    formatRangeToParts(startDate: Date | number, endDate: Date | number): Intl.DateTimeRangeFormatPart[];
+    /**
+     * Get the resolved options used for formatting.
+     */
+    resolvedOptions(): Intl.ResolvedDateTimeFormatOptions;
+    /**
+     * Static method to check which locales are supported.
+     */
+    static supportedLocalesOf(locales: string | string[], options?: Intl.DateTimeFormatOptions): string[];
+}
 interface DateRangeFormatPart extends Intl.DateTimeFormatPart {
     source: 'startRange' | 'endRange' | 'shared';
 }
diff --git a/dist/types.d.ts.map b/dist/types.d.ts.map
index 7be612975368b5341f156e5c7d011a10ad6f0640..d61ab23ce65475db82197d5ead5d6799bd027b35 100644
--- a/dist/types.d.ts.map
+++ b/dist/types.d.ts.map
@@ -1 +1 @@
-{"mappings":"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","sources":["packages/@internationalized/date/src/packages/@internationalized/date/src/utils.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/GregorianCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/weekStartData.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/queries.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/conversion.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/manipulation.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/string.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/CalendarDate.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/types.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/JapaneseCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/BuddhistCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/TaiwanCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/PersianCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/IndianCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/IslamicCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/HebrewCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/EthiopicCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/createCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/DateFormatter.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/index.ts","packages/@internationalized/date/src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  CalendarIdentifier,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday,\n  isEqualCalendar\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n"],"names":[],"version":3,"file":"types.d.ts.map"}
\ No newline at end of file
+{"mappings":"AAcA,aAAoB,CAAC,IAAI;IACvB,CAAC,UAAS,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CAC9B,CAAC;ACiDF;;;GAGG;AACH,8BAA+B,YAAW,QAAQ;IAChD,UAAU,EAAE,kBAAkB,CAAa;IAE3C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IA0BvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAK7C,eAAe,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI9C,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAK5C,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI5C,OAAO,IAAI,MAAM,EAAE;IAInB,YAAY,CAAC,IAAI,EAAE,eAAe,GAAG,OAAO;IAI5C,WAAW,CAAC,IAAI,EAAE,QAAQ,eAAe,CAAC,GAAG,IAAI;CAMlD;AErHD,iBAAiB,YAAY,GAAG,gBAAgB,GAAG,aAAa,CAAC;AAEjE,wGAAwG;AACxG,0BAA0B,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,GAAG,OAAO,CAG7D;AAED,4GAA4G;AAC5G,4BAA4B,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,GAAG,OAAO,CAM/D;AAED,2GAA2G;AAC3G,2BAA2B,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,GAAG,OAAO,CAK9D;AAED,kGAAkG;AAClG,2BAA2B,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,GAAG,OAAO,CAE9D;AAED,oGAAoG;AACpG,6BAA6B,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,GAAG,OAAO,CAEhE;AAED,mGAAmG;AACnG,4BAA4B,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,GAAG,OAAO,CAE/D;AAED,kDAAkD;AAClD,gCAAgC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,GAAG,OAAO,CAEjE;AAED,gEAAgE;AAChE,wBAAwB,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,GAAG,OAAO,CAElE;AAYD,iBAAiB,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAEvE;;;;GAIG;AACH,6BAA6B,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,MAAM,CAYhG;AAED,uDAAuD;AACvD,oBAAoB,QAAQ,EAAE,MAAM,GAAG,aAAa,CAEnD;AAED,mDAAmD;AACnD,sBAAsB,QAAQ,EAAE,MAAM,GAAG,YAAY,CAEpD;AAcD;;;GAGG;AACH,8BAA8B,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,GAAG,MAAM,CAKvE;AAID,6DAA6D;AAC7D,oCAAoC,MAAM,CAOzC;AAED,8DAA8D;AAC9D,6BAA6B,IAAI,EAAE,aAAa,GAAG,aAAa,CAAC;AACjE,6BAA6B,IAAI,EAAE,gBAAgB,GAAG,gBAAgB,CAAC;AACvE,6BAA6B,IAAI,EAAE,YAAY,GAAG,YAAY,CAAC;AAC/D,6BAA6B,IAAI,EAAE,SAAS,GAAG,SAAS,CAAC;AAMzD,6DAA6D;AAC7D,2BAA2B,IAAI,EAAE,aAAa,GAAG,aAAa,CAAC;AAC/D,2BAA2B,IAAI,EAAE,gBAAgB,GAAG,gBAAgB,CAAC;AACrE,2BAA2B,IAAI,EAAE,YAAY,GAAG,YAAY,CAAC;AAC7D,2BAA2B,IAAI,EAAE,SAAS,GAAG,SAAS,CAAC;AAKvD,4DAA4D;AAC5D,4BAA4B,IAAI,EAAE,aAAa,GAAG,aAAa,CAAC;AAChE,4BAA4B,IAAI,EAAE,gBAAgB,GAAG,gBAAgB,CAAC;AACtE,4BAA4B,IAAI,EAAE,YAAY,GAAG,YAAY,CAAC;AAC9D,4BAA4B,IAAI,EAAE,SAAS,GAAG,SAAS,CAAC;AAKxD,2DAA2D;AAC3D,0BAA0B,IAAI,EAAE,aAAa,GAAG,aAAa,CAAC;AAC9D,0BAA0B,IAAI,EAAE,gBAAgB,GAAG,gBAAgB,CAAC;AACpE,0BAA0B,IAAI,EAAE,YAAY,GAAG,YAAY,CAAC;AAC5D,0BAA0B,IAAI,EAAE,SAAS,GAAG,SAAS,CAAC;AAKtD,sCAAsC,IAAI,EAAE,eAAe,GAAG,MAAM,CAMnE;AAED,qCAAqC,IAAI,EAAE,eAAe,GAAG,MAAM,CAMlE;AAED,wEAAwE;AACxE,4BAA4B,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,aAAa,CAAC;AAC5G,4BAA4B,IAAI,EAAE,gBAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,gBAAgB,CAAC;AAClH,4BAA4B,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,YAAY,CAAC;AAC1G,4BAA4B,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,SAAS,CAAC;AAMpG,uEAAuE;AACvE,0BAA0B,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,aAAa,CAAC;AAC1G,0BAA0B,IAAI,EAAE,gBAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,gBAAgB,CAAC;AAChH,0BAA0B,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,YAAY,CAAC;AACxG,0BAA0B,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,SAAS,CAAC;AAsClG,iEAAiE;AACjE,gCAAgC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,SAAS,GAAG,MAAM,CAGnG;AAED,oDAAoD;AACpD,wBAAwB,CAAC,SAAS,SAAS,EAAE,CAAC,SAAS,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,SAAS,CAMtH;AAED,qDAAqD;AACrD,wBAAwB,CAAC,SAAS,SAAS,EAAE,CAAC,SAAS,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,SAAS,CAMtH;AAsBD,0EAA0E;AAC1E,0BAA0B,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAelE;AAED,0EAA0E;AAC1E,0BAA0B,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAElE;AC1ID;;GAEG;AACH,6BAA6B,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,GAAG,aAAa,CAYxE;AAED;;GAEG;AACH,yBAAyB,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,GAAG,aAAa,CAEpE;AAMD,mHAAmH;AACnH,+BAA+B,QAAQ,EAAE,eAAe,GAAG,YAAY,CAEtE;AAoBD;;;GAGG;AACH,mCAAmC,IAAI,EAAE,YAAY,GAAG,gBAAgB,GAAG,aAAa,EAAE,IAAI,CAAC,EAAE,OAAO,GAAG,gBAAgB,CAuB1H;AAED,4EAA4E;AAC5E,uBAAuB,QAAQ,EAAE,gBAAgB,GAAG,aAAa,GAAG,IAAI,CAEvE;AAED,2DAA2D;AAC3D,2BAA2B,CAAC,SAAS,eAAe,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,GAAG,CAAC,CAcpF;AAED;;;GAGG;AACH,wBAAwB,IAAI,EAAE,YAAY,GAAG,gBAAgB,GAAG,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,cAAc,GAAG,aAAa,CAW/I;AAOD,gEAAgE;AAChE,2BAA2B,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,GAAG,aAAa,CAG/E;AAED,0EAA0E;AAC1E,gCAAgC,IAAI,EAAE,aAAa,GAAG,aAAa,CAElE;AEvRD,sCAAsC;AACtC,0BAA0B,KAAK,EAAE,MAAM,GAAG,IAAI,CAY7C;AAED,+DAA+D;AAC/D,0BAA0B,KAAK,EAAE,MAAM,GAAG,YAAY,CAcrD;AAED,kEAAkE;AAClE,8BAA8B,KAAK,EAAE,MAAM,GAAG,gBAAgB,CAsB7D;AAED;;;;;GAKG;AACH,mCAAmC,KAAK,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,cAAc,GAAG,aAAa,CA0ChG;AAED;;;GAGG;AACH,8BAA8B,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,GAAG,aAAa,CA6B5E;AAED;;;GAGG;AACH,qCAAqC,KAAK,EAAE,MAAM,GAAG,aAAa,CAEjE;AA6CD;;;;GAIG;AACH,8BAA8B,KAAK,EAAE,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CA0DvE;ACtPD,kGAAkG;AAClG;;IAME,qEAAqE;IACrE,SAAgB,QAAQ,EAAE,QAAQ,CAAC;IACnC,yDAAyD;IACzD,SAAgB,GAAG,EAAE,MAAM,CAAC;IAC5B,4CAA4C;IAC5C,SAAgB,IAAI,EAAE,MAAM,CAAC;IAC7B;;;;OAIG;IACH,SAAgB,KAAK,EAAE,MAAM,CAAC;IAC9B,uCAAuC;IACvC,SAAgB,GAAG,EAAE,MAAM,CAAC;gBAEhB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;gBACxC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;gBACrD,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;gBAC5D,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;IAYrF,mCAAmC;IACnC,IAAI,IAAI,YAAY;IAQpB,wEAAwE;IACxE,GAAG,CAAC,QAAQ,EAAE,YAAY,GAAG,YAAY;IAIzC,+EAA+E;IAC/E,QAAQ,CAAC,QAAQ,EAAE,YAAY,GAAG,YAAY;IAI9C,mIAAmI;IACnI,GAAG,CAAC,MAAM,EAAE,UAAU,GAAG,YAAY;IAIrC;;;OAGG;IACH,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,YAAY,GAAG,YAAY;IAI7E,kHAAkH;IAClH,MAAM,CAAC,QAAQ,EAAE,MAAM,GAAG,IAAI;IAI9B,yDAAyD;IACzD,QAAQ,IAAI,MAAM;IAIlB,2JAA2J;IAC3J,OAAO,CAAC,CAAC,EAAE,eAAe,GAAG,MAAM;CAGpC;AAED,kEAAkE;AAClE;;IAIE,uCAAuC;IACvC,SAAgB,IAAI,EAAE,MAAM,CAAC;IAC7B,8BAA8B;IAC9B,SAAgB,MAAM,EAAE,MAAM,CAAC;IAC/B,gCAAgC;IAChC,SAAgB,MAAM,EAAE,MAAM,CAAC;IAC/B,qCAAqC;IACrC,SAAgB,WAAW,EAAE,MAAM,CAAC;gBAGlC,IAAI,GAAE,MAAU,EAChB,MAAM,GAAE,MAAU,EAClB,MAAM,GAAE,MAAU,EAClB,WAAW,GAAE,MAAU;IASzB,mCAAmC;IACnC,IAAI,IAAI,IAAI;IAIZ,gEAAgE;IAChE,GAAG,CAAC,QAAQ,EAAE,YAAY,GAAG,IAAI;IAIjC,uEAAuE;IACvE,QAAQ,CAAC,QAAQ,EAAE,YAAY,GAAG,IAAI;IAItC,2HAA2H;IAC3H,GAAG,CAAC,MAAM,EAAE,UAAU,GAAG,IAAI;IAI7B;;;OAGG;IACH,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,gBAAgB,GAAG,IAAI;IAIzE,yDAAyD;IACzD,QAAQ,IAAI,MAAM;IAIlB,2JAA2J;IAC3J,OAAO,CAAC,CAAC,EAAE,OAAO,GAAG,MAAM;CAG5B;AAED,wGAAwG;AACxG;;IAIE,qEAAqE;IACrE,SAAgB,QAAQ,EAAE,QAAQ,CAAC;IACnC,yDAAyD;IACzD,SAAgB,GAAG,EAAE,MAAM,CAAC;IAC5B,4CAA4C;IAC5C,SAAgB,IAAI,EAAE,MAAM,CAAC;IAC7B;;;;OAIG;IACH,SAAgB,KAAK,EAAE,MAAM,CAAC;IAC9B,uCAAuC;IACvC,SAAgB,GAAG,EAAE,MAAM,CAAC;IAC5B,kDAAkD;IAClD,SAAgB,IAAI,EAAE,MAAM,CAAC;IAC7B,8BAA8B;IAC9B,SAAgB,MAAM,EAAE,MAAM,CAAC;IAC/B,gCAAgC;IAChC,SAAgB,MAAM,EAAE,MAAM,CAAC;IAC/B,qCAAqC;IACrC,SAAgB,WAAW,EAAE,MAAM,CAAC;gBAExB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;gBAC/G,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;gBAC5H,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;gBACnI,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;IAgB5J,mCAAmC;IACnC,IAAI,IAAI,gBAAgB;IAQxB,4EAA4E;IAC5E,GAAG,CAAC,QAAQ,EAAE,gBAAgB,GAAG,gBAAgB;IAIjD,mFAAmF;IACnF,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,GAAG,gBAAgB;IAItD,uIAAuI;IACvI,GAAG,CAAC,MAAM,EAAE,UAAU,GAAG,UAAU,GAAG,gBAAgB;IAItD;;;OAGG;IACH,KAAK,CAAC,KAAK,EAAE,SAAS,GAAG,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,gBAAgB,GAAG,gBAAgB;IAYjG,mFAAmF;IACnF,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,cAAc,GAAG,IAAI;IAI/D,yDAAyD;IACzD,QAAQ,IAAI,MAAM;IAIlB,2JAA2J;IAC3J,OAAO,CAAC,CAAC,EAAE,YAAY,GAAG,gBAAgB,GAAG,aAAa,GAAG,MAAM;CAQpE;AAED,8FAA8F;AAC9F;;IAIE,qEAAqE;IACrE,SAAgB,QAAQ,EAAE,QAAQ,CAAC;IACnC,yDAAyD;IACzD,SAAgB,GAAG,EAAE,MAAM,CAAC;IAC5B,4CAA4C;IAC5C,SAAgB,IAAI,EAAE,MAAM,CAAC;IAC7B;;;;OAIG;IACH,SAAgB,KAAK,EAAE,MAAM,CAAC;IAC9B,uCAAuC;IACvC,SAAgB,GAAG,EAAE,MAAM,CAAC;IAC5B,kDAAkD;IAClD,SAAgB,IAAI,EAAE,MAAM,CAAC;IAC7B,8BAA8B;IAC9B,SAAgB,MAAM,EAAE,MAAM,CAAC;IAC/B,gCAAgC;IAChC,SAAgB,MAAM,EAAE,MAAM,CAAC;IAC/B,qCAAqC;IACrC,SAAgB,WAAW,EAAE,MAAM,CAAC;IACpC,+EAA+E;IAC/E,SAAgB,QAAQ,EAAE,MAAM,CAAC;IACjC,qDAAqD;IACrD,SAAgB,MAAM,EAAE,MAAM,CAAC;gBAEnB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;gBACjJ,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;gBAC9J,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;gBACrK,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM;IAoB9L,mCAAmC;IACnC,IAAI,IAAI,aAAa;IAQrB,yEAAyE;IACzE,GAAG,CAAC,QAAQ,EAAE,gBAAgB,GAAG,aAAa;IAI9C,gFAAgF;IAChF,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,GAAG,aAAa;IAInD,oIAAoI;IACpI,GAAG,CAAC,MAAM,EAAE,UAAU,GAAG,UAAU,EAAE,cAAc,CAAC,EAAE,cAAc,GAAG,aAAa;IAIpF;;;OAGG;IACH,KAAK,CAAC,KAAK,EAAE,SAAS,GAAG,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,gBAAgB,GAAG,aAAa;IAI9F,4DAA4D;IAC5D,MAAM,IAAI,IAAI;IAIb,4GAA4G;IAC7G,QAAQ,IAAI,MAAM;IAIjB,gEAAgE;IACjE,gBAAgB,IAAI,MAAM;IAI1B,2JAA2J;IAC3J,OAAO,CAAC,CAAC,EAAE,YAAY,GAAG,gBAAgB,GAAG,aAAa,GAAG,MAAM;CAIpE;ACvYD,wEAAwE;AACxE;IACE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC;IAC5B,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC;IACrB,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;IACtB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;IACvB,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC;IACrB,IAAI,IAAI,IAAI,CAAA;CACb;AAED,wEAAwE;AACxE;IACE,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;IACtB,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;IACxB,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;IACxB,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC;IAC7B,IAAI,IAAI,IAAI,CAAA;CACb;AAED,sFAAsF;AACtF,4BAA6B,SAAQ,eAAe,EAAE,OAAO;CAAG;AAEhE,iCAAiC,SAAS,GAAG,UAAU,GAAG,SAAS,GAAG,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,GAAG,SAAS,GAAG,kBAAkB,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,GAAG,SAAS,GAAG,UAAU,GAAG,SAAS,GAAG,KAAK,GAAG,QAAQ,CAAC;AAErR;;;;GAIG;AACH;IACE;;;OAGG;IACH,UAAU,EAAE,kBAAkB,CAAC;IAE/B,gFAAgF;IAChF,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY,CAAC;IACxC,+DAA+D;IAC/D,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC;IAE3C,iEAAiE;IACjE,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC;IAC9C,kEAAkE;IAClE,eAAe,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC;IAC/C,gEAAgE;IAChE,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC;IAC7C,0DAA0D;IAC1D,OAAO,IAAI,MAAM,EAAE,CAAC;IAEpB;;;;OAIG;IACH,qBAAqB,CAAC,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC;IACtD;;;;OAIG;IACH,oBAAoB,CAAC,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM,CAAC;IACrD;;;;;OAKG;IACH,mBAAmB,CAAC,CAAC,IAAI,EAAE,eAAe,GAAG,YAAY,CAAC;IAE1D,uEAAuE;IACvE,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,GAAG,OAAO,CAAC;IAEtC,eAAe;IACf,WAAW,CAAC,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI,CAAC;IAC1C,eAAe;IACf,gBAAgB,CAAC,CAAC,IAAI,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,GAAG,IAAI,CAAC;IAC9E,eAAe;IACf,aAAa,CAAC,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI,CAAC;IAC5C,eAAe;IACf,YAAY,CAAC,CAAC,IAAI,EAAE,eAAe,GAAG,OAAO,CAAA;CAC9C;AAED,mGAAmG;AACnG;IACE,8CAA8C;IAC9C,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,+CAA+C;IAC/C,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,8CAA8C;IAC9C,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,6CAA6C;IAC7C,IAAI,CAAC,EAAE,MAAM,CAAA;CACd;AAED,uEAAuE;AACvE;IACE,8CAA8C;IAC9C,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,gDAAgD;IAChD,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,gDAAgD;IAChD,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,qDAAqD;IACrD,YAAY,CAAC,EAAE,MAAM,CAAA;CACtB;AAED,2GAA2G;AAC3G,iCAAkC,SAAQ,YAAY,EAAE,YAAY;CAAG;AAEvE;IACE,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAA;CACb;AAED;IACE,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,WAAW,CAAC,EAAE,MAAM,CAAA;CACrB;AAED,wBAAwB,MAAM,UAAU,CAAC;AACzC,wBAAwB,MAAM,UAAU,CAAC;AAEzC,6BAA6B,YAAY,GAAG,SAAS,GAAG,OAAO,GAAG,QAAQ,CAAC;AAE3E;IACE,8EAA8E;IAC9E,KAAK,CAAC,EAAE,OAAO,CAAA;CAChB;AAED,iCAAkC,SAAQ,YAAY;IACpD;;;;;OAKG;IACH,SAAS,CAAC,EAAE,EAAE,GAAG,EAAE,CAAA;CACpB;AC1FD;;;;GAIG;AACH,6BAA8B,SAAQ,iBAAiB;IACrD,UAAU,EAAE,kBAAkB,CAAc;IAE5C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAavC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI1C,WAAW,CAAC,IAAI,EAAE,QAAQ,eAAe,CAAC,GAAG,IAAI;IAajD,aAAa,CAAC,IAAI,EAAE,QAAQ,eAAe,CAAC,GAAG,IAAI;IA6BnD,OAAO,IAAI,MAAM,EAAE;IAInB,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAmB5C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI7C,qBAAqB,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAKpD,oBAAoB,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;CAIpD;ACpJD;;;;GAIG;AACH,6BAA8B,SAAQ,iBAAiB;IACrD,UAAU,EAAE,kBAAkB,CAAc;IAE5C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAWvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI1C,OAAO,IAAI,MAAM,EAAE;IAInB,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI7C,WAAW,IAAI,IAAI;CACpB;AChBD;;;;GAIG;AACH,2BAA4B,SAAQ,iBAAiB;IACnD,UAAU,EAAE,kBAAkB,CAAS;IAEvC,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAOvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI1C,OAAO,IAAI,MAAM,EAAE;IAInB,WAAW,CAAC,IAAI,EAAE,QAAQ,eAAe,CAAC,GAAG,IAAI;IAMjD,YAAY,CAAC,IAAI,EAAE,eAAe,GAAG,OAAO;IAI5C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI7C,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;CAG7C;ACxCD;;;;;GAKG;AACH,4BAA6B,YAAW,QAAQ;IAC9C,UAAU,EAAE,kBAAkB,CAAa;IAE3C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAYvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAO1C,eAAe,IAAI,MAAM;IAIzB,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAa7C,OAAO,IAAI,MAAM,EAAE;IAInB,aAAa,IAAI,MAAM;CAKxB;AClED;;;;GAIG;AACH,2BAA4B,SAAQ,iBAAiB;IACnD,UAAU,EAAE,kBAAkB,CAAY;IAE1C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IA4CvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IA4B1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAY7C,aAAa,IAAI,MAAM;IAMvB,OAAO,IAAI,MAAM,EAAE;IAInB,WAAW,IAAI,IAAI;CACpB;ACpFD;;;;;;GAMG;AACH,iCAAkC,YAAW,QAAQ;IACnD,UAAU,EAAE,kBAAkB,CAAmB;IAEjD,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAIvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAS7C,eAAe,IAAI,MAAM;IAIzB,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI5C,aAAa,IAAI,MAAM;IAKvB,OAAO,IAAI,MAAM,EAAE;CAGpB;AAED;;;;;;GAMG;AACH,mCAAoC,SAAQ,oBAAoB;IAC9D,UAAU,EAAE,kBAAkB,CAAkB;IAEhD,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAIvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;CAG3C;AAiCD;;;;;;GAMG;AACH,oCAAqC,SAAQ,oBAAoB;IAC/D,UAAU,EAAE,kBAAkB,CAAsB;;IAqBpD,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAiCvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAQ1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAQ7C,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;CAO7C;ACpGD;;;;GAIG;AACH,2BAA4B,YAAW,QAAQ;IAC7C,UAAU,EAAE,kBAAkB,CAAY;IAE1C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IA6BvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAS1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI7C,eAAe,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI9C,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI5C,aAAa,IAAI,MAAM;IAKvB,OAAO,IAAI,MAAM,EAAE;IAInB,gBAAgB,CAAC,IAAI,EAAE,QAAQ,eAAe,CAAC,EAAE,YAAY,EAAE,eAAe,GAAG,IAAI;CAUtF;AC3ID;;;;GAIG;AACH,6BAA8B,YAAW,QAAQ;IAC/C,UAAU,EAAE,kBAAkB,CAAc;IAE5C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAWvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAS1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI7C,eAAe,IAAI,MAAM;IAIzB,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI5C,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAO5C,OAAO,IAAI,MAAM,EAAE;CAGpB;AAED;;;GAGG;AACH,sCAAuC,SAAQ,gBAAgB;IAC7D,UAAU,EAAE,kBAAkB,CAAa;IAE3C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAMvC,OAAO,IAAI,MAAM,EAAE;IAInB,aAAa,IAAI,MAAM;CAIxB;AAED;;;;GAIG;AACH,2BAA4B,SAAQ,gBAAgB;IAClD,UAAU,EAAE,kBAAkB,CAAY;IAE1C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAWvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAS1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAS7C,YAAY,CAAC,IAAI,EAAE,eAAe,GAAG,OAAO;IAI5C,WAAW,CAAC,IAAI,EAAE,QAAQ,eAAe,CAAC,GAAG,IAAI;IAOjD,OAAO,IAAI,MAAM,EAAE;IAInB,aAAa,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;CAM7C;AClJD;;;;GAIG;AACH,2BAA4B,SAAQ,iBAAiB;IACnD,UAAU,EAAe,kBAAkB,CAAC;IAE5C,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,YAAY;IAkBvC,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAyB1C,cAAc,CAAC,IAAI,EAAE,eAAe,GAAG,MAAM;IAI7C,aAAa,IAAI,MAAM;IAIvB,OAAO,IAAI,MAAM,EAAE;IAInB,WAAW,IAAI,IAAI;CACpB;AC1FD,+EAA+E;AAC/E,+BAA+B,IAAI,EAAE,kBAAkB,GAAG,QAAQ,CAgCjE;ACpDD,iCAAkC,YAAW,IAAI,CAAC,cAAc;gBAMlD,MAAM,EAAE,MAAM,EAAE,OAAO,GAAE,KAAK,qBAA0B;IAwBpE;;OAEG;IACH,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,MAAM,GAAG,MAAM;IAcpC;;OAEG;IACH,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,MAAM,GAAG,KAAK,kBAAkB,EAAE;IAiC9D;;OAEG;IACH,WAAW,CAAC,SAAS,EAAE,IAAI,GAAG,MAAM,EAAE,OAAO,EAAE,IAAI,GAAG,MAAM,GAAG,MAAM;IAgBrE;;OAEG;IACH,kBAAkB,CAAC,SAAS,EAAE,IAAI,GAAG,MAAM,EAAE,OAAO,EAAE,IAAI,GAAG,MAAM,GAAG,KAAK,uBAAuB,EAAE;IA8LpG;;OAEG;IACH,eAAe,IAAI,KAAK,6BAA6B;IAcrD;;OAEG;IACH,MAAM,CAAC,kBAAkB,CACvB,OAAO,EAAE,MAAM,GAAG,MAAM,EAAE,EAC1B,OAAO,CAAC,EAAE,KAAK,qBAAqB,GACnC,MAAM,EAAE;CAIZ;ACtTD,6BAA8B,SAAQ,IAAI,CAAC,kBAAkB;IAC3D,MAAM,EAAE,YAAY,GAAG,UAAU,GAAG,QAAQ,CAAA;CAC7C;AAED,wGAAwG;AACxG,0BAA2B,YAAW,IAAI,CAAC,cAAc;gBAM3C,MAAM,EAAE,MAAM,EAAE,OAAO,GAAE,KAAK,qBAA0B;IAMpE,uGAAuG;IACvG,MAAM,CAAC,KAAK,EAAE,IAAI,GAAG,MAAM;IAI3B,8FAA8F;IAC9F,aAAa,CAAC,KAAK,EAAE,IAAI,GAAG,KAAK,kBAAkB,EAAE;IAIrD,wCAAwC;IACxC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,GAAG,MAAM;IAe3C,iDAAiD;IACjD,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,GAAG,mBAAmB,EAAE;IAoBjE,6FAA6F;IAC7F,eAAe,IAAI,KAAK,6BAA6B;CAkBtD","sources":["packages/@internationalized/date/src/packages/@internationalized/date/src/utils.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/GregorianCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/weekStartData.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/queries.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/conversion.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/manipulation.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/string.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/CalendarDate.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/types.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/JapaneseCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/BuddhistCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/TaiwanCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/PersianCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/IndianCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/IslamicCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/HebrewCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/EthiopicCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/calendars/NepaliCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/createCalendar.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/NepaliDateTimeFormat.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/DateFormatter.ts","packages/@internationalized/date/src/packages/@internationalized/date/src/index.ts","packages/@internationalized/date/src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  CalendarIdentifier,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {NepaliCalendar} from './calendars/NepaliCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday,\n  isEqualCalendar\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\nexport {NepaliDateTimeFormat} from './NepaliDateTimeFormat';\n"],"names":[],"version":3,"file":"types.d.ts.map"}
\ No newline at end of file
diff --git a/src/DateFormatter.ts b/src/DateFormatter.ts
index 21ab69f310ef990e5e63d66aafb146b0b2605ebf..735f809e9159c6f38cd43aaff55925a0dd90eb98 100644
--- a/src/DateFormatter.ts
+++ b/src/DateFormatter.ts
@@ -10,6 +10,8 @@
  * governing permissions and limitations under the License.
  */
 
+import {NepaliDateTimeFormat} from './NepaliDateTimeFormat';
+
 let formatterCache = new Map<string, Intl.DateTimeFormat>();
 
 interface DateRangeFormatPart extends Intl.DateTimeFormatPart {
@@ -21,10 +23,12 @@ export class DateFormatter implements Intl.DateTimeFormat {
   private formatter: Intl.DateTimeFormat;
   private options: Intl.DateTimeFormatOptions;
   private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];
+  private resolvedCalendar: Intl.DateTimeFormatOptions['calendar'];
 
   constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {
     this.formatter = getCachedDateFormatter(locale, options);
     this.options = options;
+    this.resolvedCalendar = options.calendar;
   }
 
   /** Formats a date as a string according to the locale and format options passed to the constructor. */
@@ -132,6 +136,12 @@ function getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOpti
     return formatterCache.get(cacheKey)!;
   }
 
+  if (options.calendar === 'nepali') {
+    let nepaliFormatter = new NepaliDateTimeFormat(locale, options);
+    formatterCache.set(cacheKey, nepaliFormatter);
+    return nepaliFormatter;
+  }
+
   let numberFormatter = new Intl.DateTimeFormat(locale, options);
   formatterCache.set(cacheKey, numberFormatter);
   return numberFormatter;
diff --git a/src/NepaliDateTimeFormat.ts b/src/NepaliDateTimeFormat.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6256b6f569f1135c8097746e4f1523e9ab4ab028
--- /dev/null
+++ b/src/NepaliDateTimeFormat.ts
@@ -0,0 +1,327 @@
+import {AnyCalendarDate} from './types';
+import {gregorianToJulianDay} from './calendars/GregorianCalendar';
+import {NepaliCalendar} from './calendars/NepaliCalendar';
+
+export class NepaliDateTimeFormat implements Intl.DateTimeFormat {
+  private locale: string;
+  private options: Intl.DateTimeFormatOptions;
+  private calendar: NepaliCalendar;
+  private internalFormatter: Intl.DateTimeFormat;
+
+  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {
+    this.locale = locale;
+    this.options = {...options, calendar: 'gregory'}; // Use gregory for internal formatting
+
+    // Create a similar formatter without the nepali calendar for fallback formatting
+    this.internalFormatter = new Intl.DateTimeFormat(locale, this.options);
+
+    // Initialize the nepali calendar
+    this.calendar = new NepaliCalendar();
+  }
+
+  /**
+   * Convert a JavaScript Date to a Nepali date object.
+   */
+  private toNepaliDate(date: Date): AnyCalendarDate {
+    const julianDay = gregorianToJulianDay(
+      'AD',
+      date.getFullYear(),
+      date.getMonth() + 1,
+      date.getDate()
+    );
+    return this.calendar.fromJulianDay(julianDay);
+  }
+
+  /**
+   * Format a date according to the locale and options.
+   */
+  format(date?: Date | number): string {
+    if (date === undefined) {
+      date = new Date();
+    } else if (typeof date === 'number') {
+      date = new Date(date);
+    }
+
+    // Get parts from internal formatter
+    const parts = this.formatToParts(date);
+
+    // Combine parts into a string
+    return parts.map(part => part.value).join('');
+  }
+
+  /**
+   * Format a date to parts according to the locale and options.
+   */
+  formatToParts(date?: Date | number): Intl.DateTimeFormatPart[] {
+    if (date === undefined) {
+      date = new Date();
+    } else if (typeof date === 'number') {
+      date = new Date(date);
+    }
+
+    const nepaliDate = this.toNepaliDate(date);
+
+    // Get parts from internal formatter first
+    const parts = this.internalFormatter.formatToParts(date);
+
+    // Replace year, month, and day values with Nepali equivalents
+    return parts.map(part => {
+      const newPart = {...part};
+
+      if (part.type === 'year') {
+        newPart.value = this.formatNepaliValue(nepaliDate.year);
+      } else if (part.type === 'month') {
+        newPart.value = this.formatNepaliMonth(nepaliDate.month, part.value);
+      } else if (part.type === 'day') {
+        newPart.value = this.formatNepaliValue(nepaliDate.day);
+      } else if (part.type === 'weekday') {
+        // Keep original weekday as days of week align between calendars
+      } else if (part.type === 'era') {
+        newPart.value = this.formatNepaliEra();
+      }
+
+
+      return newPart;
+    });
+  }
+
+  /**
+   * Format a date range according to the locale and options.
+   */
+  formatRange(startDate: Date | number, endDate: Date | number): string {
+    // Convert to Date objects if numbers
+    if (typeof startDate === 'number') {
+      startDate = new Date(startDate);
+    }
+    if (typeof endDate === 'number') {
+      endDate = new Date(endDate);
+    }
+
+    // Get parts from formatRangeToParts
+    const parts = this.formatRangeToParts(startDate, endDate);
+
+    // Combine parts into a string
+    return parts.map(part => part.value).join('');
+  }
+
+  /**
+   * Format a date range to parts according to the locale and options.
+   */
+  formatRangeToParts(startDate: Date | number, endDate: Date | number): Intl.DateTimeRangeFormatPart[] {
+    // Convert to Date objects if numbers
+    if (typeof startDate === 'number') {
+      startDate = new Date(startDate);
+    }
+    if (typeof endDate === 'number') {
+      endDate = new Date(endDate);
+    }
+
+    // Get Nepali dates
+    const nepaliStartDate = this.toNepaliDate(startDate);
+    const nepaliEndDate = this.toNepaliDate(endDate);
+
+    // Use internal formatter to get range parts
+    const rangeParts = this.internalFormatter.formatRangeToParts(startDate, endDate);
+
+    // Replace year, month, and day values with Nepali equivalents
+    return rangeParts.map(part => {
+      const newPart = {...part};
+
+      if (part.type === 'year') {
+        const nepaliYear = part.source === 'startRange' ? nepaliStartDate.year : nepaliEndDate.year;
+        newPart.value = this.formatNepaliValue(nepaliYear);
+      } else if (part.type === 'month') {
+        const nepaliMonth = part.source === 'startRange' ? nepaliStartDate.month : nepaliEndDate.month;
+        newPart.value = this.formatNepaliMonth(nepaliMonth, part.value);
+      } else if (part.type === 'day') {
+        const nepaliDay = part.source === 'startRange' ? nepaliStartDate.day : nepaliEndDate.day;
+        newPart.value = this.formatNepaliValue(nepaliDay);
+      } else if (part.type === 'era') {
+        // Use appropriate era name based on locale
+        newPart.value = this.locale.startsWith('ne') ? 'बि.सं.' : 'BS'; // Bikram Sambat
+      }
+
+      return newPart;
+    });
+  }
+
+  /**
+   * Format a numeric value using Nepali/Devanagari digits if the locale requires it.
+   */
+  private formatNepaliValue(value: number): string {
+    // Check if we should use Devanagari digits based on locale and numberingSystem
+    const useDevanagariDigits = this.locale.startsWith('ne') ||
+                                this.options.numberingSystem === 'deva';
+
+    if (useDevanagariDigits) {
+      return value.toString().replace(/\d/g, digit =>
+        String.fromCharCode(0x0966 + Number.parseInt(digit, 10)) // 0x0966 is the Unicode code point for Devanagari digit 0
+      );
+    }
+
+    return value.toString();
+  }
+
+  /**
+   * Format a month value according to the format type used in original part.
+   */
+  private formatNepaliMonth(month: number, originalFormat: string): string {
+    // Define Nepali month names (for Nepali locale)
+    const nepaliMonths = {
+      long: [
+        'बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन',
+        'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'
+      ],
+      short: [
+        'बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन',
+        'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुन', 'चैत्र'
+      ],
+      narrow: [
+        'बै', 'जे', 'अ', 'श्रा', 'भा', 'आ',
+        'का', 'मं', 'पौ', 'मा', 'फा', 'चै'
+      ]
+    };
+
+    // Define transliterated month names (for non-Nepali locales)
+    const transliteratedMonths = {
+      long: [
+        'Baisakh', 'Jestha', 'Asadh', 'Shrawan', 'Bhadra', 'Ashwin',
+        'Kartik', 'Mangsir', 'Poush', 'Magh', 'Falgun', 'Chaitra'
+      ],
+      short: [
+        'Bai', 'Jes', 'Asa', 'Shr', 'Bha', 'Ash',
+        'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'
+      ],
+      narrow: [
+        'B', 'J', 'A', 'S', 'B', 'A',
+        'K', 'M', 'P', 'M', 'F', 'C'
+      ]
+    };
+
+    // Choose the appropriate month names based on locale
+    const monthNames = this.locale.startsWith('ne') ? nepaliMonths : transliteratedMonths;
+
+    if (/^\d+$/.test(originalFormat)) {
+      let formattedMonth = this.formatNepaliValue(month);
+      if (originalFormat.length === 2) {
+        formattedMonth = formattedMonth.padStart(2, this.formatNepaliValue(0).charAt(0));
+      }
+      return formattedMonth;
+    }
+
+    // Determine the format type based on both month and dateStyle options
+    let formatType: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
+
+    if (this.options.month) {
+      formatType = this.options.month;
+    } else if (this.options.dateStyle) {
+      // Map dateStyle to appropriate month format
+      switch (this.options.dateStyle) {
+        case 'full':
+        case 'long':
+          formatType = 'long';
+          break;
+        case 'medium':
+          formatType = 'short';
+          break;
+        case 'short':
+          formatType = 'numeric';
+          break;
+        default:
+          formatType = 'long';
+      }
+    } else {
+      // Default to long format if no options specified
+      formatType = 'long';
+    }
+
+    // Format the month according to the determined format type
+    switch (formatType) {
+      case 'numeric':
+        return this.formatNepaliValue(month);
+      case '2-digit':
+        return this.formatNepaliValue(month).padStart(2, this.formatNepaliValue(0).charAt(0));
+      case 'narrow':
+        return monthNames.narrow[month - 1];
+      case 'short':
+        return monthNames.short[month - 1];
+      case 'long':
+        return monthNames.long[month - 1];
+    }
+  }
+
+  private formatNepaliEra(): string {
+    // Define Nepali era names
+    const nepaliEra = {
+      long: 'बिक्रम सम्बत',
+      short: 'बि.सं.',
+      narrow: 'बि.सं.'
+    };
+
+    // Define transliterated era names
+    const transliteratedEra = {
+      long: 'Bikram Sambat',
+      short: 'BS',
+      narrow: 'BS'
+    };
+
+    // Choose the appropriate era names based on locale
+    const eraNames = this.locale.startsWith('ne') ? nepaliEra : transliteratedEra;
+
+    // Determine the format type based on era option
+    let formatType: 'long' | 'short' | 'narrow';
+
+    if (this.options.era) {
+      formatType = this.options.era;
+    } else if (this.options.dateStyle) {
+      // Map dateStyle to appropriate era format
+      switch (this.options.dateStyle) {
+        case 'full':
+        case 'long':
+          formatType = 'long';
+          break;
+        case 'medium':
+          formatType = 'short';
+          break;
+        case 'short':
+          formatType = 'narrow';
+          break;
+        default:
+          formatType = 'short';
+      }
+    } else {
+      // Default to short format if no options specified
+      formatType = 'short';
+    }
+
+    return eraNames[formatType];
+  }
+
+  /**
+   * Get the resolved options used for formatting.
+   */
+  resolvedOptions(): Intl.ResolvedDateTimeFormatOptions {
+    const resolved = this.internalFormatter.resolvedOptions();
+
+    // Override calendar and numberingSystem
+    resolved.calendar = 'nepali';
+
+    // Use Devanagari numbering system for Nepali locale
+    if (this.locale.startsWith('ne')) {
+      resolved.numberingSystem = 'deva';
+    }
+
+    return resolved;
+  }
+
+  /**
+   * Static method to check which locales are supported.
+   */
+  static supportedLocalesOf(
+    locales: string | string[],
+    options?: Intl.DateTimeFormatOptions
+  ): string[] {
+    // For now, simply delegate to the internal formatter's supportedLocalesOf
+    return Intl.DateTimeFormat.supportedLocalesOf(locales, options);
+  }
+}
diff --git a/src/calendars/NepaliCalendar.ts b/src/calendars/NepaliCalendar.ts
new file mode 100644
index 0000000000000000000000000000000000000000..67862bab6b1e02005a8e4588d056b73452cd45dd
--- /dev/null
+++ b/src/calendars/NepaliCalendar.ts
@@ -0,0 +1,114 @@
+/*
+ * Copyright 2020 Adobe. All rights reserved.
+ * This file is licensed to you under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License. You may obtain a copy
+ * of the License at http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under
+ * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
+ * OF ANY KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+ */
+
+// Portions of the code in this file are based on code from ICU.
+// Original licensing can be found in the NOTICE file in the root directory of this source tree.
+
+import {AnyCalendarDate, CalendarIdentifier} from '../types';
+import {CalendarDate} from '../CalendarDate';
+import {GregorianCalendar, gregorianToJulianDay} from './GregorianCalendar';
+
+const MS_PER_DAY = 86400000;
+const VIKRAM_SAMVAT_EPOCH = -1789990200000;
+
+const VIKRAM_YEAR_ZERO = 1970;
+
+const ENCODED_MONTH_LENGTHS = [
+  0x511aba, 0x5117ba, 0x9056ee, 0x8456ed, 0x511aba, 0x5119fa, 0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, // 1970-1979
+  0x9056ee, 0x514aea, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, // 1980-1989
+  0x511aba, 0x5116ee, 0x8456ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aba, 0x511aba, 0x9056ee, // 1990-1999
+  0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aea, 0x511aba, // 2000-2009
+  0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x8456ee, // 2010-2019
+  0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aea, 0x511aba, 0x9056ee, 0x8456ed, 0x511aba, 0x5117ba, // 2020-2029
+  0x9056ee, 0x8456ed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aed, 0x511aba, 0x5116fa, 0x9056ee, 0x514aea, // 2030-2039
+  0x511aba, 0x5116fa, 0x9056ee, 0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, 0x511aba, 0x5056ee, // 2040-2049
+  0x8456ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aba, 0x5117ba, 0x9056ee, 0x8456ed, 0x511aba, // 2050-2059
+  0x5116fa, 0x9056ee, 0x844aed, 0x511aba, 0x5116fa, 0x9056ee, 0x814aea, 0x511aba, 0x5116fa, 0x9056ee, // 2060-2069
+  0x514aea, 0x511aba, 0x5116ee, 0x9056ee, 0x511aea, 0x511aba, 0x5056ee, 0x8456ee, 0x511aea, 0x511aba, // 2070-2079
+  0x5056ee, 0x5456ee, 0x5456ed, 0x5456ba, 0x5456ba, 0x5459ee, 0x5456ed, 0x545aba, 0x5459f9, 0x5456ed, // 2080-2089
+  0x5456ed                                                                                           // 2090
+];
+
+function _getDaysInMonth(year: number, month: number) {
+  if (month < 1 || month > 12) {throw new Error('Invalid month value: ' + month);}
+
+  const delta = ENCODED_MONTH_LENGTHS[year - VIKRAM_YEAR_ZERO];
+  if (typeof delta === 'undefined') {throw new Error('No data for year: ' + year + ' BS');}
+
+  return 29 + ((delta >>> (((month - 1) << 1))) & 3);
+}
+
+/**
+ * The Vikram Samvat Calendar is a historical Hindu calendar used in the Indian subcontinent and Nepal.
+ * Years are counted from 57 BCE. The calendar is primarily used in Nepal and among Hindus
+ * in North India. Only one era identifier is supported: 'vikram'.
+ */
+export class NepaliCalendar extends GregorianCalendar {
+  identifier = 'nepali' as CalendarIdentifier;
+
+  fromJulianDay(jd: number): CalendarDate {
+    // Gregorian date for Julian day
+    let date = super.fromJulianDay(jd);
+
+    var m, dM, year = VIKRAM_YEAR_ZERO, days = Math.floor((Date.parse(date.toString()) - VIKRAM_SAMVAT_EPOCH) / MS_PER_DAY) + 1;
+
+    while (days > 0) {
+      for (m = 1; m <= 12; ++m) {
+        dM = _getDaysInMonth(year, m);
+        if (days <= dM) {return new CalendarDate(this, year, m, days);}
+        days -= dM;
+      }
+      ++year;
+    }
+
+    throw new Error('Date outside supported range: ' + jd + ' AD');
+  }
+
+  toJulianDay(date: AnyCalendarDate): number {
+    if (date.year < VIKRAM_YEAR_ZERO) {throw new Error('Invalid year value: ' + date.year);}
+    if (date.day < 1 || date.day > _getDaysInMonth(date.year, date.month)) {throw new Error('Invalid day value: ' + date.day);}
+
+    let timestamp = VIKRAM_SAMVAT_EPOCH + (MS_PER_DAY * date.day);
+
+
+    let {year, month} = date;
+
+    month -= 1;
+
+    while (year >= VIKRAM_YEAR_ZERO) {
+      while (month > 0) {
+        timestamp += (MS_PER_DAY * _getDaysInMonth(year, month));
+        month--;
+      }
+      month = 12;
+      year--;
+    }
+
+    const jsdate = new Date(timestamp);
+
+    return gregorianToJulianDay('AD', jsdate.getUTCFullYear(), jsdate.getUTCMonth() + 1, jsdate.getUTCDate());
+  }
+
+  getDaysInMonth(date: AnyCalendarDate): number {
+    return _getDaysInMonth(date.year, date.month);
+  }
+
+  getYearsInEra(): number {
+    return VIKRAM_YEAR_ZERO + ENCODED_MONTH_LENGTHS.length - 1;
+  }
+
+  getEras(): string[] {
+    return ['BS'];
+  }
+
+  balanceDate(): void {}
+}
diff --git a/src/createCalendar.ts b/src/createCalendar.ts
index 46f629b07cedbf558c249be222245b8a34056234..da8254b3005be0d2413a4bf69131d1d7784db826 100644
--- a/src/createCalendar.ts
+++ b/src/createCalendar.ts
@@ -18,9 +18,9 @@ import {HebrewCalendar} from './calendars/HebrewCalendar';
 import {IndianCalendar} from './calendars/IndianCalendar';
 import {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';
 import {JapaneseCalendar} from './calendars/JapaneseCalendar';
+import {NepaliCalendar} from './calendars/NepaliCalendar';
 import {PersianCalendar} from './calendars/PersianCalendar';
 import {TaiwanCalendar} from './calendars/TaiwanCalendar';
-
 /** Creates a `Calendar` instance from a Unicode calendar identifier string. */
 export function createCalendar(name: CalendarIdentifier): Calendar {
   switch (name) {
@@ -48,6 +48,8 @@ export function createCalendar(name: CalendarIdentifier): Calendar {
       return new PersianCalendar();
     case 'roc':
       return new TaiwanCalendar();
+    case 'nepali':
+      return new NepaliCalendar();
     case 'gregory':
     default:
       return new GregorianCalendar();
diff --git a/src/index.ts b/src/index.ts
index d55e305e8f99561d36e7698ed76c37c8f0681468..6d0f565ba334a9c67be4bac45d739f3ecb8324a4 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -38,6 +38,7 @@ export {IndianCalendar} from './calendars/IndianCalendar';
 export {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';
 export {HebrewCalendar} from './calendars/HebrewCalendar';
 export {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';
+export {NepaliCalendar} from './calendars/NepaliCalendar';
 export {createCalendar} from './createCalendar';
 export {
   toCalendarDate,
@@ -88,3 +89,4 @@ export {
   parseDuration
 } from './string';
 export {DateFormatter} from './DateFormatter';
+export {NepaliDateTimeFormat} from './NepaliDateTimeFormat';
diff --git a/src/types.ts b/src/types.ts
index 78fba68fe0dd52e5395be0a4364f5bb4ed96adfc..40c5046c3b0c7dae4dbc11f4c1690946e8aad1b1 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -34,7 +34,7 @@ export interface AnyTime {
 /** An interface that is compatible with any object with both date and time fields. */
 export interface AnyDateTime extends AnyCalendarDate, AnyTime {}
 
-export type CalendarIdentifier = 'gregory' | 'buddhist' | 'chinese' | 'coptic' | 'dangi' | 'ethioaa' | 'ethiopic' | 'hebrew' | 'indian' | 'islamic' | 'islamic-umalqura' | 'islamic-tbla' | 'islamic-civil' | 'islamic-rgsa' | 'iso8601' | 'japanese' | 'persian' | 'roc';
+export type CalendarIdentifier = 'gregory' | 'buddhist' | 'chinese' | 'coptic' | 'dangi' | 'ethioaa' | 'ethiopic' | 'hebrew' | 'indian' | 'islamic' | 'islamic-umalqura' | 'islamic-tbla' | 'islamic-civil' | 'islamic-rgsa' | 'iso8601' | 'japanese' | 'persian' | 'roc' | 'nepali';
 
 /**
  * The Calendar interface represents a calendar system, including information
@@ -77,7 +77,7 @@ export interface Calendar {
   /**
    * Returns a date that is the first day of the month for the given date.
    * This is used to determine the month that the given date falls in, if
-   * the calendar has months that do not align with the standard calendar months 
+   * the calendar has months that do not align with the standard calendar months
    * (e.g. fiscal calendars).
    */
   getFormattableMonth?(date: AnyCalendarDate): CalendarDate,
